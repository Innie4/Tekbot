[
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\next.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\analytics\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\chatbots\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\help\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\integrations\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Puzzle' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import DashboardLayout from '@/components/admin/dashboard-layout';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Button } from '@/components/ui/button';\nimport { Puzzle } from 'lucide-react';\n\nexport default function IntegrationsPage() {\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold\">Integrations</h2>\n        <p className=\"text-sm text-muted-foreground\">\n          Connect TekAssist to your tools and platforms.\n        </p>\n        <GlassCard className=\"p-4 space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm\">Slack</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Send conversations and alerts to Slack channels\n              </p>\n            </div>\n            <Button variant=\"outline\">Configure</Button>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm\">Webhook</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Push events to your backend via webhooks\n              </p>\n            </div>\n            <Button variant=\"outline\">Configure</Button>\n          </div>\n        </GlassCard>\n      </div>\n    </DashboardLayout>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\messages\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\settings\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\training\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\users\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\admin\\widget\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [493, 496], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [493, 496], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 11,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 11,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [507, 558], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport DashboardLayout from '@/components/admin/dashboard-layout';\nimport WidgetConfigurator from '@/components/admin/widget-configurator';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { motion } from 'framer-motion';\n\nexport default function AdminWidgetPage() {\n  const apiUrl = `${(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api').replace(/\\/$/, '')}/v${process.env.NEXT_PUBLIC_API_VERSION || '1'}/widget`;\n  const handleConfigSave = (config: any) => {\n    console.log('Widget configuration saved:', config);\n    // Here you would typically save to your backend\n  };\n\n  return (\n    <DashboardLayout>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"space-y-6\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n              Widget Configuration\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Customize your chat widget appearance, behavior, and embed settings\n            </p>\n          </div>\n        </div>\n\n        <GlassCard className=\"p-6\">\n          <WidgetConfigurator\n            tenantId=\"default-tenant\"\n            apiUrl={apiUrl}\n            onConfigSave={handleConfigSave}\n          />\n        </GlassCard>\n      </motion.div>\n    </DashboardLayout>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\api\\openai\\chat.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\global-error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\onboarding\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\pricing\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\services\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\sign-in\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1887, 1890], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1887, 1890], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2661, 2664], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2661, 2664], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\nimport React, { useState } from 'react';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { GlassInput } from '@/components/ui/glass-input';\nimport { Button } from '@/components/ui/button';\nimport { api } from '@/lib/api/api-client';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport default function SignInPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const isValidEmail = (value: string) => /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/.test(value);\n  const isValidPassword = (value: string) => value.length >= 8;\n\n  const onEmailChange = (value: string) => {\n    setEmail(value);\n    if (!value) {\n      setEmailError('Email is required');\n    } else if (!isValidEmail(value)) {\n      setEmailError('Please enter a valid email address');\n    } else {\n      setEmailError(null);\n    }\n  };\n\n  const onPasswordChange = (value: string) => {\n    setPassword(value);\n    if (!value) {\n      setPasswordError('Password is required');\n    } else if (!isValidPassword(value)) {\n      setPasswordError('Password must be at least 8 characters');\n    } else {\n      setPasswordError(null);\n    }\n  };\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    // Client-side validation\n    if (!isValidEmail(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    if (!isValidPassword(password)) {\n      setError('Password must be at least 8 characters long.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await api.post<{ user: any; accessToken: string; refreshToken: string }>(\n        '/auth/login',\n        { email, password }\n      );\n\n      // Store tokens, user, and tenant context\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('auth-token', result.accessToken);\n        localStorage.setItem('refresh-token', result.refreshToken);\n        localStorage.setItem('auth-user', JSON.stringify(result.user));\n        if (result.user?.tenantId) {\n          localStorage.setItem('tenant-id', result.user.tenantId);\n        }\n        if (result.user?.tenantSlug) {\n          localStorage.setItem('tenant-slug', result.user.tenantSlug);\n        }\n      }\n\n      toast({ title: 'Signed in', description: 'Welcome back!' });\n      window.location.href = '/admin';\n    } catch (err: any) {\n      const message = err?.message || 'Sign in failed';\n      setError(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-[70vh] items-center justify-center p-6\">\n      <GlassCard className=\"w-full max-w-md\">\n        <h1 className=\"text-2xl font-semibold mb-4\">Sign In</h1>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Welcome back. Enter your credentials to continue.\n        </p>\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 rounded-md p-3 mb-4\">\n            {error}\n          </div>\n        )}\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"sign-in-email\" className=\"block text-sm mb-1\">\n              Email\n            </label>\n            <GlassInput\n              id=\"sign-in-email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => onEmailChange(e.target.value)}\n              placeholder=\"you@example.com\"\n              required\n            />\n            {emailError && <p className=\"mt-1 text-xs text-red-600\">{emailError}</p>}\n          </div>\n          <div>\n            <label htmlFor=\"sign-in-password\" className=\"block text-sm mb-1\">\n              Password\n            </label>\n            <GlassInput\n              id=\"sign-in-password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => onPasswordChange(e.target.value)}\n              placeholder=\"••••••••\"\n              required\n            />\n            {passwordError && <p className=\"mt-1 text-xs text-red-600\">{passwordError}</p>}\n          </div>\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading || !!emailError || !!passwordError}\n          >\n            {loading ? 'Signing in…' : 'Log In'}\n          </Button>\n        </form>\n        <div className=\"text-sm mt-4 text-center\">\n          Don’t have an account?{' '}\n          <a href=\"/sign-up\" className=\"text-primary\">\n            Sign up\n          </a>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\app\\sign-up\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ArrowRight' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2746, 2749], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2746, 2749], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3213, 3216], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3213, 3216], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 94,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 94,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3291, 3294], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3291, 3294], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3345, 3348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3345, 3348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3427, 3430], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3427, 3430], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3607, 3610], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3607, 3610], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 146,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 146,
        "endColumn": 53
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 157,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 157,
        "endColumn": 53
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 169,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 169,
        "endColumn": 51
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 180,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 180,
        "endColumn": 51
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\nimport React, { useState } from 'react';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { GlassInput } from '@/components/ui/glass-input';\nimport { Button } from '@/components/ui/button';\nimport { api } from '@/lib/api/api-client';\nimport { useToast } from '@/components/ui/use-toast';\nimport { ArrowRight, Chrome } from 'lucide-react';\n\nexport default function SignUpPage() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [firstNameError, setFirstNameError] = useState<string | null>(null);\n  const [lastNameError, setLastNameError] = useState<string | null>(null);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const isValidEmail = (value: string) => /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/.test(value);\n  const isValidPassword = (value: string) => value.length >= 8;\n  const isValidName = (value: string) => value.trim().length > 0;\n\n  const onFirstNameChange = (value: string) => {\n    setFirstName(value);\n    setFirstNameError(!value ? 'First name is required' : null);\n  };\n\n  const onLastNameChange = (value: string) => {\n    setLastName(value);\n    setLastNameError(!value ? 'Last name is required' : null);\n  };\n\n  const onEmailChange = (value: string) => {\n    setEmail(value);\n    if (!value) {\n      setEmailError('Email is required');\n    } else if (!isValidEmail(value)) {\n      setEmailError('Please enter a valid email address');\n    } else {\n      setEmailError(null);\n    }\n  };\n\n  const onPasswordChange = (value: string) => {\n    setPassword(value);\n    if (!value) {\n      setPasswordError('Password is required');\n    } else if (!isValidPassword(value)) {\n      setPasswordError('Password must be at least 8 characters');\n    } else {\n      setPasswordError(null);\n    }\n  };\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    // Client-side validation\n    if (!isValidName(firstName)) {\n      setError('Please enter your first name.');\n      return;\n    }\n    if (!isValidName(lastName)) {\n      setError('Please enter your last name.');\n      return;\n    }\n    if (!isValidEmail(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    if (!isValidPassword(password)) {\n      setError('Password must be at least 8 characters long.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await api.post<{ user: any; accessToken: string; refreshToken: string }>(\n        '/auth/register',\n        { firstName, lastName, email, password }\n      );\n\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('auth-token', result.accessToken);\n        localStorage.setItem('refresh-token', result.refreshToken);\n        localStorage.setItem('auth-user', JSON.stringify(result.user));\n        localStorage.setItem('has-onboarded', 'false');\n        if ((result.user as any)?.tenantId) {\n          localStorage.setItem('tenant-id', (result.user as any).tenantId);\n        }\n        if ((result.user as any)?.tenantSlug) {\n          localStorage.setItem('tenant-slug', (result.user as any).tenantSlug);\n        }\n      }\n\n      toast({ title: 'Account created', description: 'Welcome to TekAssist!' });\n      window.location.href = '/onboarding';\n    } catch (err: any) {\n      const message = err?.message || 'Sign up failed';\n      setError(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const startGoogleSignIn = () => {\n    try {\n      // If backend Google OAuth is configured, this route should exist\n      window.location.href = '/api/v1/auth/google';\n    } catch (e) {\n      toast({ title: 'Google Sign-In unavailable', description: 'OAuth not configured yet.' });\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-[70vh] items-center justify-center p-6\">\n      <GlassCard className=\"w-full max-w-md\">\n        <h1 className=\"text-2xl font-semibold mb-4\">Create Account</h1>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Join TekAssist and start managing conversations effortlessly.\n        </p>\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 rounded-md p-3 mb-4\">\n            {error}\n          </div>\n        )}\n        <Button type=\"button\" variant=\"outline\" className=\"w-full mb-4\" onClick={startGoogleSignIn}>\n          <Chrome className=\"mr-2 h-4 w-4\" /> Continue with Google\n        </Button>\n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t border-border/50\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs\">\n            <span className=\"px-2 bg-background text-muted-foreground\">or</span>\n          </div>\n        </div>\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-sm mb-1\">First Name</label>\n              <GlassInput\n                type=\"text\"\n                value={firstName}\n                onChange={(e) => onFirstNameChange(e.target.value)}\n                placeholder=\"John\"\n                required\n              />\n              {firstNameError && <p className=\"mt-1 text-xs text-red-600\">{firstNameError}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm mb-1\">Last Name</label>\n              <GlassInput\n                type=\"text\"\n                value={lastName}\n                onChange={(e) => onLastNameChange(e.target.value)}\n                placeholder=\"Doe\"\n                required\n              />\n              {lastNameError && <p className=\"mt-1 text-xs text-red-600\">{lastNameError}</p>}\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">Email</label>\n            <GlassInput\n              type=\"email\"\n              value={email}\n              onChange={(e) => onEmailChange(e.target.value)}\n              placeholder=\"you@example.com\"\n              required\n            />\n            {emailError && <p className=\"mt-1 text-xs text-red-600\">{emailError}</p>}\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">Password</label>\n            <GlassInput\n              type=\"password\"\n              value={password}\n              onChange={(e) => onPasswordChange(e.target.value)}\n              placeholder=\"••••••••\"\n              required\n            />\n            {passwordError && <p className=\"mt-1 text-xs text-red-600\">{passwordError}</p>}\n          </div>\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={\n              loading || !!firstNameError || !!lastNameError || !!emailError || !!passwordError\n            }\n          >\n            {loading ? 'Creating account…' : 'Create Account'}\n          </Button>\n        </form>\n        <div className=\"text-sm mt-4 text-center\">\n          Already have an account?{' '}\n          <a href=\"/sign-in\" className=\"text-primary\">\n            Sign in\n          </a>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\AdminDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [334, 337], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [334, 337], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [389, 392], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [389, 392], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [444, 447], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [444, 447], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1186, 1189], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1186, 1189], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1364, 1367], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1364, 1367], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1543, 1546], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1543, 1546], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useMemo, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { api } from '@/lib/api/api-client';\n\nconst SECTIONS = ['Leads', 'Appointments', 'Payments', 'Messages', 'Analytics'];\n\nconst AdminDashboard: React.FC = () => {\n  const [appointments, setAppointments] = useState<any[]>([]);\n  const [payments, setPayments] = useState<any[]>([]);\n  const [messages, setMessages] = useState<any[]>([]);\n  const [activeSection, setActiveSection] = useState('Leads');\n\n  // Sorting/filtering states\n  const [apptSort, setApptSort] = useState('asc');\n  const [apptFilter, setApptFilter] = useState('');\n  const [paySort, setPaySort] = useState('asc');\n  const [payFilter, setPayFilter] = useState('');\n  const [msgSort, setMsgSort] = useState('asc');\n  const [msgFilter, setMsgFilter] = useState('');\n\n  const tenantId = useMemo(() => {\n    try {\n      return typeof window !== 'undefined' ? localStorage.getItem('tenant-id') : null;\n    } catch {\n      return null;\n    }\n  }, []);\n\n  const { data: apptData = [], isFetching: apptLoading } = useQuery({\n    queryKey: ['appointments', tenantId || 'default'],\n    queryFn: () => api.get<any[]>('/appointments'),\n  });\n\n  const { data: payData = [], isFetching: payLoading } = useQuery({\n    queryKey: ['payments', tenantId || 'default'],\n    queryFn: () => api.get<any[]>('/payments'),\n  });\n\n  const { data: msgData = [], isFetching: msgLoading } = useQuery({\n    queryKey: ['notifications', tenantId || 'default'],\n    queryFn: () => api.get<any[]>('/notifications'),\n  });\n\n  // Mirror data into local state to reuse existing sorting/filtering logic without larger refactor\n  React.useEffect(() => {\n    setAppointments(apptData);\n  }, [apptData]);\n  React.useEffect(() => {\n    setPayments(payData);\n  }, [payData]);\n  React.useEffect(() => {\n    setMessages(msgData);\n  }, [msgData]);\n\n  // Sorting/filtering logic\n  const sortedAppointments = [...appointments]\n    .filter((a) =>\n      apptFilter\n        ? a.title?.toLowerCase().includes(apptFilter.toLowerCase()) ||\n          a.id?.toString().includes(apptFilter)\n        : true\n    )\n    .sort((a, b) =>\n      apptSort === 'asc'\n        ? String(a.title || a.id).localeCompare(String(b.title || b.id))\n        : String(b.title || b.id).localeCompare(String(a.title || a.id))\n    );\n\n  const sortedPayments = [...payments]\n    .filter((p) =>\n      payFilter\n        ? p.amount?.toString().includes(payFilter) || p.id?.toString().includes(payFilter)\n        : true\n    )\n    .sort((a, b) =>\n      paySort === 'asc' ? (a.amount || 0) - (b.amount || 0) : (b.amount || 0) - (a.amount || 0)\n    );\n\n  const sortedMessages = [...messages]\n    .filter((m) =>\n      msgFilter\n        ? m.text?.toLowerCase().includes(msgFilter.toLowerCase()) ||\n          m.message?.toLowerCase().includes(msgFilter.toLowerCase())\n        : true\n    )\n    .sort((a, b) =>\n      msgSort === 'asc'\n        ? String(a.text || a.message || a.id).localeCompare(String(b.text || b.message || b.id))\n        : String(b.text || b.message || b.id).localeCompare(String(a.text || a.message || a.id))\n    );\n\n  // Add analytics calculations\n  const totalAppointments = appointments.length;\n  const totalPayments = payments.length;\n  const totalPaymentAmount = payments.reduce((sum, p) => sum + (p.amount || 0), 0);\n  const totalMessages = messages.length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 p-8\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center text-white\">TekAssist Admin Dashboard</h1>\n      {/* Section navigation tabs */}\n      <div className=\"flex justify-center mb-8 gap-4\">\n        {SECTIONS.map((section) => (\n          <button\n            key={section}\n            className={`px-4 py-2 rounded-full font-semibold transition-colors ${activeSection === section ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-200'}`}\n            onClick={() => setActiveSection(section)}\n          >\n            {section}\n          </button>\n        ))}\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {/* Leads Section */}\n        {activeSection === 'Leads' && (\n          <section className=\"bg-gray-800 rounded-xl shadow p-6 col-span-2 text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Leads</h2>\n            <div className=\"h-40 overflow-y-auto\">{/* Leads data will go here */}</div>\n          </section>\n        )}\n        {/* Appointments Section */}\n        {activeSection === 'Appointments' && (\n          <section className=\"bg-gray-800 rounded-xl shadow p-6 col-span-2 text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Appointments</h2>\n            <div className=\"flex items-center mb-2 gap-2\">\n              <input\n                type=\"text\"\n                placeholder=\"Filter by title or ID\"\n                value={apptFilter}\n                onChange={(e) => setApptFilter(e.target.value)}\n                className=\"border rounded px-2 py-1 bg-gray-900 text-white\"\n              />\n              <button\n                className={`px-2 py-1 rounded ${apptSort === 'asc' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-200'}`}\n                onClick={() => setApptSort(apptSort === 'asc' ? 'desc' : 'asc')}\n              >\n                Sort {apptSort === 'asc' ? '↑' : '↓'}\n              </button>\n            </div>\n            <div className=\"h-40 overflow-y-auto\">\n              {apptLoading && <span className=\"text-gray-400\">Loading...</span>}\n              {sortedAppointments.length === 0 ? (\n                <span className=\"text-gray-400\">No appointments found.</span>\n              ) : (\n                <ul>\n                  {sortedAppointments.map((appt, idx) => (\n                    <li key={idx} className=\"mb-2\">\n                      {appt.title || appt.id || JSON.stringify(appt)}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </section>\n        )}\n        {/* Payments Section */}\n        {activeSection === 'Payments' && (\n          <section className=\"bg-gray-800 rounded-xl shadow p-6 col-span-2 text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Payments</h2>\n            <div className=\"flex items-center mb-2 gap-2\">\n              <input\n                type=\"text\"\n                placeholder=\"Filter by amount or ID\"\n                value={payFilter}\n                onChange={(e) => setPayFilter(e.target.value)}\n                className=\"border rounded px-2 py-1 bg-gray-900 text-white\"\n              />\n              <button\n                className={`px-2 py-1 rounded ${paySort === 'asc' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-200'}`}\n                onClick={() => setPaySort(paySort === 'asc' ? 'desc' : 'asc')}\n              >\n                Sort {paySort === 'asc' ? '↑' : '↓'}\n              </button>\n            </div>\n            <div className=\"h-40 overflow-y-auto\">\n              {payLoading && <span className=\"text-gray-400\">Loading...</span>}\n              {sortedPayments.length === 0 ? (\n                <span className=\"text-gray-400\">No payments found.</span>\n              ) : (\n                <ul>\n                  {sortedPayments.map((pay, idx) => (\n                    <li key={idx} className=\"mb-2\">\n                      {pay.amount ? `$${pay.amount}` : pay.id || JSON.stringify(pay)}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </section>\n        )}\n        {/* Messages Section */}\n        {activeSection === 'Messages' && (\n          <section className=\"bg-gray-800 rounded-xl shadow p-6 col-span-2 text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Messages</h2>\n            <div className=\"flex items-center mb-2 gap-2\">\n              <input\n                type=\"text\"\n                placeholder=\"Filter by text or ID\"\n                value={msgFilter}\n                onChange={(e) => setMsgFilter(e.target.value)}\n                className=\"border rounded px-2 py-1 bg-gray-900 text-white\"\n              />\n              <button\n                className={`px-2 py-1 rounded ${msgSort === 'asc' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-200'}`}\n                onClick={() => setMsgSort(msgSort === 'asc' ? 'desc' : 'asc')}\n              >\n                Sort {msgSort === 'asc' ? '↑' : '↓'}\n              </button>\n            </div>\n            <div className=\"h-40 overflow-y-auto\">\n              {msgLoading && <span className=\"text-gray-400\">Loading...</span>}\n              {sortedMessages.length === 0 ? (\n                <span className=\"text-gray-400\">No messages found.</span>\n              ) : (\n                <ul>\n                  {sortedMessages.map((msg, idx) => (\n                    <li key={idx} className=\"mb-2\">\n                      {msg.text || msg.message || msg.id || JSON.stringify(msg)}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </section>\n        )}\n        {/* Analytics Section */}\n        {activeSection === 'Analytics' && (\n          <section className=\"bg-gray-800 rounded-xl shadow p-6 col-span-2 text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Analytics</h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Total Appointments:</span>\n                <span className=\"text-blue-400 font-bold\">{totalAppointments}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Total Payments:</span>\n                <span className=\"text-green-400 font-bold\">{totalPayments}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Total Payment Amount:</span>\n                <span className=\"text-green-400 font-bold\">\n                  ${totalPaymentAmount.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Total Messages:</span>\n                <span className=\"text-purple-400 font-bold\">{totalMessages}</span>\n              </div>\n            </div>\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\admin-home.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\analytics-dashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\appointments-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\campaigns-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\charts\\ActivityChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\charts\\ConversationVolumeChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\charts\\ResponseTimeChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\customers-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\dashboard-layout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cn' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 9,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'HelpCircle' is defined but never used.",
        "line": 11,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 13
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 47,
        "column": 13,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 47,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [1385, 1385], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 59,
        "column": 13,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 59,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [1788, 1788], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Button } from '@/components/ui/button';\nimport {\n  LayoutDashboard,\n  Users,\n  Settings,\n  HelpCircle,\n  BarChart3,\n  MessageSquare,\n  Puzzle,\n  Menu,\n  X,\n  FileText,\n  LogOut,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport TenantSelector from '@/components/admin/tenant-selector';\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nconst sidebarItems = [\n  { icon: LayoutDashboard, label: 'Home', href: '/admin' },\n  { icon: MessageSquare, label: 'My Chatbots', href: '/admin/chatbots' },\n  { icon: FileText, label: 'Training Data', href: '/admin/training' },\n  { icon: Puzzle, label: 'Integrations', href: '/admin/integrations' },\n  { icon: BarChart3, label: 'Analytics', href: '/admin/analytics' },\n  { icon: Settings, label: 'Settings', href: '/admin/settings' },\n];\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    try {\n      const token = localStorage.getItem('auth-token');\n      if (!token) {\n        window.location.href = '/sign-in';\n      }\n    } catch {}\n  }, []);\n\n  const handleLogout = () => {\n    try {\n      localStorage.removeItem('auth-token');\n      localStorage.removeItem('refresh-token');\n      localStorage.removeItem('auth-user');\n      localStorage.removeItem('tenant-id');\n      localStorage.removeItem('tenant-slug');\n      // Optional: clear onboarding flag for a full reset\n      // localStorage.removeItem('has-onboarded');\n    } catch {}\n    window.location.href = '/sign-in';\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-tech-dark\">\n      {/* Desktop Sidebar */}\n      <AnimatePresence>\n        {sidebarOpen && (\n          <motion.aside\n            initial={{ x: -300 }}\n            animate={{ x: 0 }}\n            exit={{ x: -300 }}\n            transition={{ duration: 0.3 }}\n            className=\"hidden md:block w-64 p-4 border-r border-border/10\"\n          >\n            <div className=\"flex flex-col h-full\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <h2 className=\"text-xl font-bold bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n                  TekAssist Admin\n                </h2>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setSidebarOpen(false)}\n                  className=\"md:flex lg:hidden\"\n                >\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </div>\n\n              <nav className=\"flex-1 space-y-2\">\n                {sidebarItems.map((item) => (\n                  <Link\n                    key={item.label}\n                    href={item.href}\n                    className=\"flex items-center gap-3 px-3 py-2 rounded-md hover:bg-white/5 transition-colors\"\n                  >\n                    <item.icon className=\"h-5 w-5 text-electric-blue\" />\n                    <span>{item.label}</span>\n                  </Link>\n                ))}\n              </nav>\n\n              <div className=\"mt-auto space-y-3\">\n                <GlassCard className=\"p-4\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">Need help?</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Contact Support\n                  </Button>\n                </GlassCard>\n                <Button variant=\"destructive\" size=\"sm\" className=\"w-full\" onClick={handleLogout}>\n                  <LogOut className=\"h-4 w-4 mr-2\" /> Logout\n                </Button>\n              </div>\n            </div>\n          </motion.aside>\n        )}\n      </AnimatePresence>\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Top Navigation */}\n        <header className=\"sticky top-0 z-10 glass-effect border-b border-border/10 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {!sidebarOpen && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setSidebarOpen(true)}\n                  className=\"hidden md:flex\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                className=\"md:hidden\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <h1 className=\"text-lg font-semibold\">Admin Dashboard</h1>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <TenantSelector />\n              <Button variant=\"outline\" size=\"sm\">\n                Profile\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Mobile Menu */}\n        <AnimatePresence>\n          {mobileMenuOpen && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.2 }}\n              className=\"md:hidden glass-effect border-b border-border/10 p-4\"\n            >\n              <nav className=\"space-y-2\">\n                {sidebarItems.map((item) => (\n                  <Link\n                    key={item.label}\n                    href={item.href}\n                    className=\"flex items-center gap-3 px-3 py-2 rounded-md hover:bg-white/5 transition-colors\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <item.icon className=\"h-5 w-5 text-electric-blue\" />\n                    <span>{item.label}</span>\n                  </Link>\n                ))}\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  onClick={() => {\n                    setMobileMenuOpen(false);\n                    handleLogout();\n                  }}\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" /> Logout\n                </Button>\n              </nav>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-4 md:p-6 overflow-auto\">{children}</main>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\dashboard-overview.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1352, 1355], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1352, 1355], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { GlassCard } from '@/components/ui/glass-card';\nimport {\n  BarChart3,\n  Users,\n  MessageSquare,\n  ArrowUp,\n  ArrowDown,\n  Loader2,\n  AlertCircle,\n} from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useState, useEffect } from 'react';\nimport { api } from '@/lib/api/api-client';\nimport ActivityChart from './charts/ActivityChart';\nimport AdminDashboard from './AdminDashboard';\n\ninterface DashboardStats {\n  totalUsers: { value: string; change: string; trend: 'up' | 'down' };\n  activeSessions: { value: string; change: string; trend: 'up' | 'down' };\n  totalMessages: { value: string; change: string; trend: 'up' | 'down' };\n}\n\nconst container = {\n  hidden: { opacity: 0 },\n  show: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nconst item = {\n  hidden: { opacity: 0, y: 20 },\n  show: { opacity: 1, y: 0, transition: { duration: 0.3 } },\n};\n\nexport default function DashboardOverview() {\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDashboardStats = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.get<DashboardStats>('/analytics/overview');\n      setStats(data);\n    } catch (err: any) {\n      setError(err.message || 'Failed to fetch dashboard stats');\n      console.error('Error fetching dashboard stats:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDashboardStats();\n  }, []);\n\n  const statsCards = stats\n    ? [\n        {\n          title: 'Total Users',\n          value: stats.totalUsers.value,\n          change: stats.totalUsers.change,\n          trend: stats.totalUsers.trend,\n          icon: Users,\n          color: 'from-electric-blue to-blue-400',\n        },\n        {\n          title: 'Active Sessions',\n          value: stats.activeSessions.value,\n          change: stats.activeSessions.change,\n          trend: stats.activeSessions.trend,\n          icon: BarChart3,\n          color: 'from-green-400 to-emerald-500',\n        },\n        {\n          title: 'Messages',\n          value: stats.totalMessages.value,\n          change: stats.totalMessages.change,\n          trend: stats.totalMessages.trend,\n          icon: MessageSquare,\n          color: 'from-purple-400 to-indigo-500',\n        },\n      ]\n    : [];\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Dashboard Overview</h2>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            Loading...\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3].map((i) => (\n            <GlassCard key={i} className=\"p-6 animate-pulse\">\n              <div className=\"h-4 bg-white/10 rounded mb-2\"></div>\n              <div className=\"h-8 bg-white/10 rounded mb-2\"></div>\n              <div className=\"h-4 bg-white/10 rounded w-1/2\"></div>\n            </GlassCard>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Dashboard Overview</h2>\n        </div>\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4 flex items-center gap-3\"\n        >\n          <AlertCircle className=\"w-5 h-5 text-red-400\" />\n          <p className=\"text-red-400\">{error}</p>\n          <button\n            onClick={fetchDashboardStats}\n            className=\"ml-auto px-3 py-1 bg-red-500/20 text-red-400 rounded hover:bg-red-500/30 transition-colors\"\n          >\n            Retry\n          </button>\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Dashboard Overview</h2>\n        <p className=\"text-sm text-muted-foreground\">Last updated: {new Date().toLocaleString()}</p>\n      </div>\n\n      <motion.div\n        variants={container}\n        initial=\"hidden\"\n        animate=\"show\"\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n      >\n        {statsCards.map((card) => (\n          <motion.div key={card.title} variants={item}>\n            <GlassCard className=\"p-6\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                  <h3 className=\"text-3xl font-bold mt-1\">{card.value}</h3>\n                  <div className=\"flex items-center mt-2\">\n                    <span\n                      className={`flex items-center text-sm ${card.trend === 'up' ? 'text-green-400' : 'text-red-400'}`}\n                    >\n                      {card.trend === 'up' ? (\n                        <ArrowUp className=\"h-3 w-3 mr-1\" />\n                      ) : (\n                        <ArrowDown className=\"h-3 w-3 mr-1\" />\n                      )}\n                      {card.change}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground ml-2\">vs last month</span>\n                  </div>\n                </div>\n                <div className={`p-3 rounded-full bg-gradient-to-r ${card.color} bg-opacity-10`}>\n                  <card.icon className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </GlassCard>\n          </motion.div>\n        ))}\n      </motion.div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        <GlassCard className=\"lg:col-span-2 p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">User Activity</h3>\n          <div className=\"h-64 border border-border/10 rounded-md bg-background\">\n            <ActivityChart />\n          </div>\n        </GlassCard>\n\n        <GlassCard className=\"p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Recent Messages</h3>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-start gap-3 pb-3 border-b border-border/10\">\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-electric-blue to-electric-cyan flex items-center justify-center text-xs font-medium\">\n                  U{i}\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium\">User #{i}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">2 hours ago</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </GlassCard>\n      </div>\n\n      <AdminDashboard />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\leads-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\messages-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\payments-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\services-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\settings-panel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 61,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 61,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1815, 1818], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1815, 1818], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 88,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 88,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2599, 2602], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2599, 2602], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'saveApiSettings' is assigned a value but never used.",
        "line": 95,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2989, 2992], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2989, 2992], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 207,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 207,
        "endColumn": 60
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 215,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 215,
        "endColumn": 60
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 282,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 282,
        "endColumn": 58
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 299,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 299,
        "endColumn": 60
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 308,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 308,
        "endColumn": 60
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 333,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 333,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Button } from '@/components/ui/button';\nimport { GlassInput } from '@/components/ui/glass-input';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { motion } from 'framer-motion';\nimport { Loader2, AlertCircle, Save } from 'lucide-react';\nimport { api } from '@/lib/api/api-client';\n\ninterface GeneralSettings {\n  siteName: string;\n  siteDescription: string;\n  enableNotifications: boolean;\n  darkMode: boolean;\n  enableAnalytics: boolean;\n}\n\ninterface ApiSettings {\n  apiKey: string;\n  maxTokens: string;\n  temperature: string;\n  enableRateLimiting: boolean;\n  rateLimitPerMinute: string;\n}\n\nexport default function SettingsPanel() {\n  const [generalSettings, setGeneralSettings] = useState<GeneralSettings>({\n    siteName: '',\n    siteDescription: '',\n    enableNotifications: true,\n    darkMode: true,\n    enableAnalytics: true,\n  });\n\n  const [apiSettings, setApiSettings] = useState<ApiSettings>({\n    apiKey: '',\n    maxTokens: '2048',\n    temperature: '0.7',\n    enableRateLimiting: true,\n    rateLimitPerMinute: '60',\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const fetchSettings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [generalData, apiData] = await Promise.all([\n        api.get<GeneralSettings>('/settings/general'),\n        api.get<ApiSettings>('/settings/api'),\n      ]);\n      setGeneralSettings(generalData);\n      setApiSettings(apiData);\n    } catch (err: any) {\n      setError(err.message || 'Failed to fetch settings');\n      console.error('Error fetching settings:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const handleGeneralChange = (key: string, value: string | boolean) => {\n    setGeneralSettings((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const handleApiChange = (key: string, value: string | boolean) => {\n    setApiSettings((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const saveGeneralSettings = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      await api.put('/settings/general', generalSettings);\n      setSuccess('General settings saved successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (err: any) {\n      setError(err.message || 'Failed to save general settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const saveApiSettings = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      await api.put('/settings/api', apiSettings);\n      setSuccess('API settings saved successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (err: any) {\n      setError(err.message || 'Failed to save API settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Settings</h2>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            Loading settings...\n          </div>\n        </div>\n        <GlassCard className=\"p-6 animate-pulse\">\n          <div className=\"h-4 bg-white/10 rounded mb-4\"></div>\n          <div className=\"space-y-4\">\n            <div className=\"h-10 bg-white/10 rounded\"></div>\n            <div className=\"h-10 bg-white/10 rounded\"></div>\n            <div className=\"h-6 bg-white/10 rounded w-1/3\"></div>\n          </div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Error/Success Display */}\n      {error && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4 flex items-center gap-3\"\n        >\n          <AlertCircle className=\"w-5 h-5 text-red-400\" />\n          <p className=\"text-red-400\">{error}</p>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setError(null)}\n            className=\"ml-auto text-red-400 hover:text-red-300\"\n          >\n            ×\n          </Button>\n        </motion.div>\n      )}\n\n      {success && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4 flex items-center gap-3\"\n        >\n          <Save className=\"w-5 h-5 text-green-400\" />\n          <p className=\"text-green-400\">{success}</p>\n        </motion.div>\n      )}\n\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Settings</h2>\n      </div>\n\n      <Tabs defaultValue=\"general\" className=\"w-full\">\n        <TabsList className=\"glass-effect mb-6\">\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n          <TabsTrigger value=\"api\">API Configuration</TabsTrigger>\n          <TabsTrigger value=\"appearance\">Appearance</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <GlassCard className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-medium\">General Settings</h3>\n                <Button\n                  onClick={saveGeneralSettings}\n                  disabled={saving}\n                  className=\"glass-button-effect\"\n                >\n                  {saving ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Changes\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Site Name</label>\n                    <GlassInput\n                      value={generalSettings.siteName}\n                      onChange={(e) => handleGeneralChange('siteName', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Site Description</label>\n                    <GlassInput\n                      value={generalSettings.siteDescription}\n                      onChange={(e) => handleGeneralChange('siteDescription', e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium\">Preferences</h4>\n\n                  <div className=\"flex items-center justify-between py-2 border-b border-border/10\">\n                    <div>\n                      <p className=\"font-medium\">Enable Notifications</p>\n                      <p className=\"text-sm text-muted-foreground\">Receive system notifications</p>\n                    </div>\n                    <Switch\n                      checked={generalSettings.enableNotifications}\n                      onCheckedChange={(checked) =>\n                        handleGeneralChange('enableNotifications', checked)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between py-2 border-b border-border/10\">\n                    <div>\n                      <p className=\"font-medium\">Dark Mode</p>\n                      <p className=\"text-sm text-muted-foreground\">Use dark theme</p>\n                    </div>\n                    <Switch\n                      checked={generalSettings.darkMode}\n                      onCheckedChange={(checked) => handleGeneralChange('darkMode', checked)}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between py-2 border-b border-border/10\">\n                    <div>\n                      <p className=\"font-medium\">Enable Analytics</p>\n                      <p className=\"text-sm text-muted-foreground\">Collect usage data</p>\n                    </div>\n                    <Switch\n                      checked={generalSettings.enableAnalytics}\n                      onCheckedChange={(checked) => handleGeneralChange('enableAnalytics', checked)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\">Cancel</Button>\n                  <Button>Save Changes</Button>\n                </div>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"api\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-lg font-medium mb-6\">API Configuration</h3>\n\n              <div className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">API Key</label>\n                  <div className=\"flex gap-2\">\n                    <GlassInput\n                      value={apiSettings.apiKey}\n                      onChange={(e) => handleApiChange('apiKey', e.target.value)}\n                      className=\"flex-1\"\n                      type=\"password\"\n                    />\n                    <Button variant=\"outline\">Regenerate</Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Your API key is secret. Never share it publicly.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Max Tokens</label>\n                    <GlassInput\n                      value={apiSettings.maxTokens}\n                      onChange={(e) => handleApiChange('maxTokens', e.target.value)}\n                      type=\"number\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Temperature</label>\n                    <GlassInput\n                      value={apiSettings.temperature}\n                      onChange={(e) => handleApiChange('temperature', e.target.value)}\n                      type=\"number\"\n                      step=\"0.1\"\n                      min=\"0\"\n                      max=\"1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between py-2 border-b border-border/10\">\n                  <div>\n                    <p className=\"font-medium\">Enable Rate Limiting</p>\n                    <p className=\"text-sm text-muted-foreground\">Limit API requests per minute</p>\n                  </div>\n                  <Switch\n                    checked={apiSettings.enableRateLimiting}\n                    onCheckedChange={(checked) => handleApiChange('enableRateLimiting', checked)}\n                  />\n                </div>\n\n                {apiSettings.enableRateLimiting && (\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Rate Limit (requests per minute)</label>\n                    <GlassInput\n                      value={apiSettings.rateLimitPerMinute}\n                      onChange={(e) => handleApiChange('rateLimitPerMinute', e.target.value)}\n                      type=\"number\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\">Cancel</Button>\n                  <Button>Save Changes</Button>\n                </div>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"appearance\">\n          <GlassCard className=\"p-6 flex items-center justify-center h-64\">\n            <p className=\"text-muted-foreground\">Appearance settings coming soon</p>\n          </GlassCard>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <GlassCard className=\"p-6 flex items-center justify-center h-64\">\n            <p className=\"text-muted-foreground\">Security settings coming soon</p>\n          </GlassCard>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\staff-panel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\tenant-selector.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1642, 1645], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1642, 1645], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2018, 2021], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2018, 2021], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'currentUser?.role', 'currentUser?.tenant?.id', 'currentUser?.tenant?.name', 'currentUser?.tenant?.subdomain', and 'currentUser?.tenantId'. Either include them or remove the dependency array.",
        "line": 98,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 98,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [currentUser?.role, currentUser?.tenant?.id, currentUser?.tenant?.name, currentUser?.tenant?.subdomain, currentUser?.tenantId]",
            "fix": {
              "range": [3330, 3332],
              "text": "[currentUser?.role, currentUser?.tenant?.id, currentUser?.tenant?.name, currentUser?.tenant?.subdomain, currentUser?.tenantId]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { api } from '@/lib/api/api-client';\nimport { useQueryClient } from '@tanstack/react-query';\n\ntype TenantOption = {\n  id: string;\n  slug?: string;\n  name?: string;\n};\n\nexport default function TenantSelector() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [options, setOptions] = useState<TenantOption[]>([]);\n  const [selectedId, setSelectedId] = useState<string | undefined>(undefined);\n  const [loading, setLoading] = useState(false);\n\n  const currentUser = useMemo(() => {\n    try {\n      const raw = typeof window !== 'undefined' ? localStorage.getItem('auth-user') : null;\n      return raw ? JSON.parse(raw) : null;\n    } catch {\n      return null;\n    }\n  }, []);\n\n  useEffect(() => {\n    const init = async () => {\n      const existingTenantId =\n        typeof window !== 'undefined' ? localStorage.getItem('tenant-id') : null;\n      const existingTenantSlug =\n        typeof window !== 'undefined' ? localStorage.getItem('tenant-slug') : null;\n      const userRole = currentUser?.role;\n\n      // Determine default selection from existing localStorage or user tenant relation\n      const defaultId = existingTenantId || currentUser?.tenantId || currentUser?.tenant?.id;\n      const defaultSlug = existingTenantSlug || currentUser?.tenant?.subdomain;\n\n      setLoading(true);\n      try {\n        let resultOptions: TenantOption[] = [];\n        // Super admin can fetch all tenants\n        if (userRole === 'super_admin') {\n          const tenants = await api.get<any[]>('/tenants');\n          const mapped: TenantOption[] = (tenants || []).map((t) => ({\n            id: t.id,\n            slug: t.subdomain || t.slug || undefined,\n            name: t.name,\n          }));\n          resultOptions = mapped;\n        } else {\n          // Other roles: fetch current tenant if available\n          try {\n            const tenant = await api.get<any>('/tenants/current');\n            if (tenant?.id) {\n              resultOptions = [\n                { id: tenant.id, slug: tenant.subdomain || tenant.slug, name: tenant.name },\n              ];\n            } else {\n              // Fallback to user tenant info\n              if (defaultId) {\n                resultOptions = [\n                  {\n                    id: defaultId,\n                    slug: defaultSlug || undefined,\n                    name: currentUser?.tenant?.name,\n                  },\n                ];\n              }\n            }\n          } catch {\n            // If endpoint not accessible, fallback to defaults\n            if (defaultId) {\n              resultOptions = [\n                { id: defaultId, slug: defaultSlug || undefined, name: currentUser?.tenant?.name },\n              ];\n            }\n          }\n        }\n        setOptions(resultOptions);\n        // Initialize selected value based on computed options\n        if (defaultId) {\n          setSelectedId(defaultId);\n        } else if (resultOptions.length > 0) {\n          const first = resultOptions[0];\n          if (first && first.id) setSelectedId(first.id);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    init();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newId = e.target.value;\n    const selected = options.find((opt) => opt.id === newId);\n    setSelectedId(newId);\n\n    try {\n      localStorage.setItem('tenant-id', newId);\n      const slug = selected?.slug;\n      if (slug) {\n        localStorage.setItem('tenant-slug', slug);\n      } else {\n        localStorage.removeItem('tenant-slug');\n      }\n\n      toast({\n        title: 'Tenant switched',\n        description: selected?.name ? `Now in ${selected.name}` : `Tenant ID: ${newId}`,\n      });\n\n      // Invalidate relevant queries to refresh panels without full reload\n      try {\n        queryClient.invalidateQueries({ queryKey: ['appointments'] });\n        queryClient.invalidateQueries({ queryKey: ['payments'] });\n        queryClient.invalidateQueries({ queryKey: ['notifications'] });\n        queryClient.invalidateQueries({ queryKey: ['leads'] });\n        queryClient.invalidateQueries({ queryKey: ['services'] });\n        queryClient.invalidateQueries({ queryKey: ['customers'] });\n      } catch (_err) {\n        // Swallow invalidation errors; UI will still use updated headers on next fetch\n      }\n    } catch (err) {\n      toast({ title: 'Failed to switch tenant', description: 'Please try again.' });\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <label htmlFor=\"tenant-selector\" className=\"sr-only\">\n        Tenant\n      </label>\n      <select\n        id=\"tenant-selector\"\n        value={selectedId || ''}\n        onChange={handleChange}\n        disabled={loading || options.length === 0}\n        className=\"glass-effect border border-border/10 rounded-md px-3 py-2 text-sm min-w-[180px] bg-transparent focus:outline-none\"\n      >\n        {options.length === 0 ? (\n          <option value=\"\" disabled>\n            {loading ? 'Loading tenants...' : 'No tenant'}\n          </option>\n        ) : (\n          options.map((opt) => (\n            <option key={opt.id} value={opt.id}>\n              {opt.name || opt.slug || opt.id}\n            </option>\n          ))\n        )}\n      </select>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\user-management.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Loader2' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'submitting' is assigned a value but never used.",
        "line": 55,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 62,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 62,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1558, 1561], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1558, 1561], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1695, 1698], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1695, 1698], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2527, 2530], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2527, 2530], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2896, 2899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2896, 2899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleUpdateUserStatus' is assigned a value but never used.",
        "line": 117,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 121,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 121,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3281, 3284], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3281, 3284], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Button } from '@/components/ui/button';\nimport { GlassInput } from '@/components/ui/glass-input';\nimport {\n  Search,\n  MoreHorizontal,\n  UserPlus,\n  Filter,\n  ArrowUpDown,\n  Loader2,\n  AlertCircle,\n} from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { api } from '@/lib/api/api-client';\n\ntype User = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  status: 'active' | 'inactive';\n  lastLoginAt?: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype CreateUserDto = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  role: string;\n  status: 'active' | 'inactive';\n};\n\nexport default function UserManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showActionMenu, setShowActionMenu] = useState<string | null>(null);\n  const [newUser, setNewUser] = useState<CreateUserDto>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    role: 'user',\n    status: 'active',\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  // Fetch users from API\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.get<any>('/users');\n      const items = Array.isArray(data) ? data : (data?.items ?? []);\n      setUsers(items as User[]);\n    } catch (err: any) {\n      setError(err.message || 'Failed to fetch users');\n      console.error('Error fetching users:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load users on component mount\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const handleAddUser = async () => {\n    if (!newUser.firstName || !newUser.lastName || !newUser.email || !newUser.password) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError(null);\n      const createdUser = await api.post<User>('/users', newUser);\n      setUsers([...users, createdUser]);\n      setShowAddModal(false);\n      setNewUser({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        role: 'user',\n        status: 'active',\n      });\n    } catch (err: any) {\n      setError(err.message || 'Failed to create user');\n      console.error('Error creating user:', err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleDeleteUser = async (id: string) => {\n    try {\n      await api.delete(`/users/${id}`);\n      setUsers(users.filter((u) => u.id !== id));\n      setShowActionMenu(null);\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete user');\n      console.error('Error deleting user:', err);\n    }\n  };\n\n  const handleUpdateUserStatus = async (id: string, status: 'active' | 'inactive') => {\n    try {\n      const updatedUser = await api.patch<User>(`/users/${id}`, { status });\n      setUsers(users.map((u) => (u.id === id ? updatedUser : u)));\n    } catch (err: any) {\n      setError(err.message || 'Failed to update user status');\n      console.error('Error updating user status:', err);\n    }\n  };\n\n  const filteredUsers = (Array.isArray(users) ? users : []).filter(\n    (user) =>\n      `${user.firstName} ${user.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const formatLastActive = (lastLoginAt?: string) => {\n    if (!lastLoginAt) return 'Never';\n    const date = new Date(lastLoginAt);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Error Display */}\n      {error && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4 flex items-center gap-3\"\n        >\n          <AlertCircle className=\"w-5 h-5 text-red-400\" />\n          <p className=\"text-red-400\">{error}</p>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setError(null)}\n            className=\"ml-auto text-red-400 hover:text-red-300\"\n          >\n            ×\n          </Button>\n        </motion.div>\n      )}\n\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">User Management</h2>\n        <Button\n          className=\"glass-button-effect\"\n          onClick={() => setShowAddModal(true)}\n          disabled={loading}\n        >\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Add User\n        </Button>\n      </div>\n\n      {/* Add User Modal */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl p-8 w-full max-w-md\">\n            <h3 className=\"text-xl font-bold mb-4\">Add New User</h3>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <input\n                  type=\"text\"\n                  placeholder=\"First Name\"\n                  className=\"border rounded px-3 py-2 w-full\"\n                  value={newUser.firstName}\n                  onChange={(e) => setNewUser({ ...newUser, firstName: e.target.value })}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Last Name\"\n                  className=\"border rounded px-3 py-2 w-full\"\n                  value={newUser.lastName}\n                  onChange={(e) => setNewUser({ ...newUser, lastName: e.target.value })}\n                />\n              </div>\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                className=\"border rounded px-3 py-2 w-full\"\n                value={newUser.email}\n                onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"Password\"\n                className=\"border rounded px-3 py-2 w-full\"\n                value={newUser.password}\n                onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n              />\n              <select\n                className=\"border rounded px-3 py-2 w-full\"\n                value={newUser.role}\n                onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}\n              >\n                <option value=\"user\">User</option>\n                <option value=\"admin\">Admin</option>\n                <option value=\"editor\">Editor</option>\n              </select>\n              <select\n                className=\"border rounded px-3 py-2 w-full\"\n                value={newUser.status}\n                onChange={(e) =>\n                  setNewUser({ ...newUser, status: e.target.value as 'active' | 'inactive' })\n                }\n              >\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n            <div className=\"flex justify-end gap-2 mt-6\">\n              <Button variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleAddUser}>Add</Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <GlassCard className=\"p-6\">\n        <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <GlassInput\n              placeholder=\"Search users...\"\n              className=\"pl-10\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <Button variant=\"outline\" size=\"icon\">\n            <Filter className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border/10\">\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    Name\n                    <ArrowUpDown className=\"h-3 w-3\" />\n                  </div>\n                </th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    Email\n                    <ArrowUpDown className=\"h-3 w-3\" />\n                  </div>\n                </th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    Role\n                    <ArrowUpDown className=\"h-3 w-3\" />\n                  </div>\n                </th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    Status\n                    <ArrowUpDown className=\"h-3 w-3\" />\n                  </div>\n                </th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    Last Active\n                    <ArrowUpDown className=\"h-3 w-3\" />\n                  </div>\n                </th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredUsers.length > 0 ? (\n                filteredUsers.map((user, index) => (\n                  <motion.tr\n                    key={user.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                    className=\"border-b border-border/10 hover:bg-white/5 transition-colors\"\n                  >\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-electric-blue to-electric-cyan flex items-center justify-center text-xs font-medium\">\n                          {user.firstName[0]}\n                          {user.lastName[0]}\n                        </div>\n                        <span>\n                          {user.firstName} {user.lastName}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-muted-foreground\">{user.email}</td>\n                    <td className=\"py-3 px-4\">\n                      <span className=\"px-2 py-1 rounded-full text-xs bg-white/10 capitalize\">\n                        {user.role}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span\n                        className={`px-2 py-1 rounded-full text-xs capitalize ${user.status === 'active' ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'}`}\n                      >\n                        {user.status}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4 text-muted-foreground\">\n                      {formatLastActive(user.lastLoginAt)}\n                    </td>\n                    <td className=\"py-3 px-4 text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => setShowActionMenu(user.id)}\n                      >\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                      {/* Actions Dropdown */}\n                      {showActionMenu === user.id && (\n                        <div className=\"absolute right-0 mt-2 bg-white rounded shadow z-10\">\n                          <button\n                            className=\"block px-4 py-2 w-full text-left hover:bg-gray-100\"\n                            onClick={() => alert('Edit user coming soon!')}\n                          >\n                            Edit\n                          </button>\n                          <button\n                            className=\"block px-4 py-2 w-full text-left hover:bg-gray-100 text-red-600\"\n                            onClick={() => handleDeleteUser(user.id)}\n                          >\n                            Delete\n                          </button>\n                        </div>\n                      )}\n                    </td>\n                  </motion.tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan={6} className=\"py-6 text-center text-muted-foreground\">\n                    No users found matching your search.\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"flex items-center justify-between mt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            Showing {filteredUsers.length} of {users.length} users\n          </p>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" disabled>\n              Previous\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              Next\n            </Button>\n          </div>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\admin\\widget-configurator.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1136, 1139], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1136, 1139], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'apiUrl' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 9
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadConfig'. Either include it or remove the dependency array.",
        "line": 104,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 104,
        "endColumn": 16,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadConfig, tenantId]",
            "fix": { "range": [2599, 2609], "text": "[loadConfig, tenantId]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'generateEmbedCode'. Either include it or remove the dependency array.",
        "line": 108,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 108,
        "endColumn": 14,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [config, generateEmbedCode]",
            "fix": {
              "range": [2663, 2671],
              "text": "[config, generateEmbedCode]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 173,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 173,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4600, 4603], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4600, 4603], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4728, 4731], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4728, 4731], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 285,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 285,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 297,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 297,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 309,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 309,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 321,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 321,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 337,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 337,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 350,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 350,
        "endColumn": 76
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 353,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 353,
        "endColumn": 89
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 366,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 366,
        "endColumn": 76
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 367,
        "column": 30,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show &quot;Powered by TekAssist\"\n                      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show &ldquo;Powered by TekAssist\"\n                      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show &#34;Powered by TekAssist\"\n                      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show &rdquo;Powered by TekAssist\"\n                      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 367,
        "column": 51,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show \"Powered by TekAssist&quot;\n                      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show \"Powered by TekAssist&ldquo;\n                      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show \"Powered by TekAssist&#34;\n                      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [12735, 12810],
              "text": "\n                        Show \"Powered by TekAssist&rdquo;\n                      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 371,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 371,
        "endColumn": 89
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 399,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 399,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 419,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 419,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 439,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 439,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 459,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 459,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 481,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 481,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 494,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 494,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 508,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 508,
        "endColumn": 85
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 531,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 531,
        "endColumn": 76
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 536,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 536,
        "endColumn": 89
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 549,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 549,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 565,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 565,
        "endColumn": 76
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 570,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 570,
        "endColumn": 89
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 583,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 583,
        "endColumn": 76
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 588,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 588,
        "endColumn": 89
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 603,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 603,
        "endColumn": 87
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 616,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 616,
        "endColumn": 87
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 645,
        "column": 65,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [28080, 28199],
              "text": "\n                      Copy and paste this code into your website&apos;s HTML to embed the chat widget.\n                    "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [28080, 28199],
              "text": "\n                      Copy and paste this code into your website&lsquo;s HTML to embed the chat widget.\n                    "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [28080, 28199],
              "text": "\n                      Copy and paste this code into your website&#39;s HTML to embed the chat widget.\n                    "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [28080, 28199],
              "text": "\n                      Copy and paste this code into your website&rsquo;s HTML to embed the chat widget.\n                    "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 659,
        "column": 51,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [28851, 29005],
              "text": "\n                        Paste it into your website&apos;s HTML, preferably before the closing\n                        &lt;/body&gt; tag\n                      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [28851, 29005],
              "text": "\n                        Paste it into your website&lsquo;s HTML, preferably before the closing\n                        &lt;/body&gt; tag\n                      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [28851, 29005],
              "text": "\n                        Paste it into your website&#39;s HTML, preferably before the closing\n                        &lt;/body&gt; tag\n                      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [28851, 29005],
              "text": "\n                        Paste it into your website&rsquo;s HTML, preferably before the closing\n                        &lt;/body&gt; tag\n                      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 666,
        "column": 55,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [29220, 29268],
              "text": "Test the widget to ensure it&apos;s working correctly"
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [29220, 29268],
              "text": "Test the widget to ensure it&lsquo;s working correctly"
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [29220, 29268],
              "text": "Test the widget to ensure it&#39;s working correctly"
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [29220, 29268],
              "text": "Test the widget to ensure it&rsquo;s working correctly"
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 30,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Save, Eye, Copy, RefreshCw, Palette, Settings, Code, Monitor } from 'lucide-react';\nimport { api } from '@/lib/api/api-client';\n\ninterface WidgetTheme {\n  primaryColor?: string;\n  secondaryColor?: string;\n  textColor?: string;\n  backgroundColor?: string;\n  borderRadius?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  buttonColor?: string;\n  buttonTextColor?: string;\n  headerColor?: string;\n  headerTextColor?: string;\n}\n\ninterface WidgetBranding {\n  logo?: string;\n  companyName?: string;\n  showPoweredBy?: boolean;\n}\n\ninterface WidgetBehavior {\n  autoOpen?: boolean;\n  autoOpenDelay?: number;\n  enableSound?: boolean;\n  enableTypingIndicator?: boolean;\n  maxHeight?: string;\n  maxWidth?: string;\n}\n\ninterface WidgetConfig {\n  id?: string;\n  tenantId: string;\n  title: string;\n  welcomeMessage?: string;\n  placeholder?: string;\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  theme: WidgetTheme;\n  branding: WidgetBranding;\n  behavior: WidgetBehavior;\n  isActive: boolean;\n  version?: string;\n  customFields?: Record<string, any>;\n}\n\ninterface WidgetConfiguratorProps {\n  tenantId: string;\n  apiUrl: string;\n  onConfigSave?: (config: WidgetConfig) => void;\n}\n\nexport default function WidgetConfigurator({\n  tenantId,\n  apiUrl,\n  onConfigSave,\n}: WidgetConfiguratorProps) {\n  const [config, setConfig] = useState<WidgetConfig>({\n    tenantId,\n    title: 'Chat Support',\n    welcomeMessage: 'Hello! How can we help you today?',\n    placeholder: 'Type your message...',\n    position: 'bottom-right',\n    theme: {\n      primaryColor: '#3B82F6',\n      secondaryColor: '#EFF6FF',\n      textColor: '#1F2937',\n      backgroundColor: '#FFFFFF',\n      borderRadius: '8px',\n      fontFamily: 'system-ui, -apple-system, sans-serif',\n      fontSize: '14px',\n      buttonColor: '#3B82F6',\n      buttonTextColor: '#FFFFFF',\n      headerColor: '#3B82F6',\n      headerTextColor: '#FFFFFF',\n    },\n    branding: {\n      companyName: 'Your Company',\n      showPoweredBy: true,\n    },\n    behavior: {\n      autoOpen: false,\n      autoOpenDelay: 3000,\n      enableSound: true,\n      enableTypingIndicator: true,\n      maxHeight: '600px',\n      maxWidth: '400px',\n    },\n    isActive: true,\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n  const [embedCode, setEmbedCode] = useState('');\n  const [activeTab, setActiveTab] = useState('general');\n\n  useEffect(() => {\n    loadConfig();\n  }, [tenantId]);\n\n  useEffect(() => {\n    generateEmbedCode();\n  }, [config]);\n\n  const loadConfig = async () => {\n    setIsLoading(true);\n    try {\n      const existingConfig = await api.get<WidgetConfig>(\n        `/widget/widget-config/tenant/${tenantId}`\n      );\n      if (existingConfig) {\n        setConfig(existingConfig);\n      }\n    } catch (error) {\n      console.error('Failed to load widget config:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const saveConfig = async () => {\n    setIsSaving(true);\n    try {\n      let savedConfig: WidgetConfig;\n      if (config.id) {\n        savedConfig = await api.put<WidgetConfig>(`/widget/widget-config/${config.id}`, config);\n      } else {\n        savedConfig = await api.post<WidgetConfig>(`/widget/widget-config`, config);\n      }\n      setConfig(savedConfig);\n      onConfigSave?.(savedConfig);\n      alert('Widget configuration saved successfully');\n    } catch (error) {\n      console.error('Failed to save widget config:', error);\n      alert('Failed to save widget configuration');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const generateEmbedCode = () => {\n    const apiBase = `${(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api').replace(/\\/$/, '')}/v${process.env.NEXT_PUBLIC_API_VERSION || '1'}/widget`;\n    const code = `<!-- TekAssist Widget -->\n<script>\n  (function() {\n    var script = document.createElement('script');\n    script.src = '${window.location.origin}/widget/embed.js';\n    script.async = true;\n    script.onload = function() {\n      TekAssistWidget.init({\n        tenantId: '${tenantId}',\n        apiUrl: '${apiBase}',\n        containerId: 'tekassist-widget'\n      });\n    };\n    document.head.appendChild(script);\n  })();\n</script>\n<div id=\"tekassist-widget\"></div>`;\n    setEmbedCode(code);\n  };\n\n  const copyEmbedCode = () => {\n    navigator.clipboard.writeText(embedCode);\n    alert('Embed code copied to clipboard');\n  };\n\n  const updateConfig = (path: string, value: any) => {\n    setConfig((prev) => {\n      const keys = path.split('.');\n      const newConfig = { ...prev };\n      let current: any = newConfig;\n\n      for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        if (key) {\n          current[key] = { ...current[key] };\n          current = current[key];\n        }\n      }\n\n      const lastKey = keys[keys.length - 1];\n      if (lastKey) {\n        current[lastKey] = value;\n      }\n      return newConfig;\n    });\n  };\n\n  const resetToDefaults = () => {\n    setConfig((prev) => ({\n      ...prev,\n      theme: {\n        primaryColor: '#3B82F6',\n        secondaryColor: '#EFF6FF',\n        textColor: '#1F2937',\n        backgroundColor: '#FFFFFF',\n        borderRadius: '8px',\n        fontFamily: 'system-ui, -apple-system, sans-serif',\n        fontSize: '14px',\n        buttonColor: '#3B82F6',\n        buttonTextColor: '#FFFFFF',\n        headerColor: '#3B82F6',\n        headerTextColor: '#FFFFFF',\n      },\n    }));\n  };\n\n  const tabs = [\n    { id: 'general', label: 'General', icon: Settings },\n    { id: 'theme', label: 'Theme', icon: Palette },\n    { id: 'behavior', label: 'Behavior', icon: Monitor },\n    { id: 'embed', label: 'Embed Code', icon: Code },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Widget Configurator</h1>\n          <p className=\"text-gray-600\">Customize your chat widget appearance and behavior</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <button\n            onClick={() => setPreviewMode(!previewMode)}\n            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Eye size={16} />\n            <span>{previewMode ? 'Hide Preview' : 'Show Preview'}</span>\n          </button>\n          <button\n            onClick={saveConfig}\n            disabled={isSaving}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n          >\n            <Save size={16} />\n            <span>{isSaving ? 'Saving...' : 'Save Configuration'}</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"border-b\">\n              <nav className=\"flex space-x-8 px-6\">\n                {tabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id)}\n                      className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${\n                        activeTab === tab.id\n                          ? 'border-blue-500 text-blue-600'\n                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                      }`}\n                    >\n                      <Icon size={16} />\n                      <span>{tab.label}</span>\n                    </button>\n                  );\n                })}\n              </nav>\n            </div>\n\n            <div className=\"p-6\">\n              {activeTab === 'general' && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Widget Title\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={config.title}\n                      onChange={(e) => updateConfig('title', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Welcome Message\n                    </label>\n                    <textarea\n                      value={config.welcomeMessage || ''}\n                      onChange={(e) => updateConfig('welcomeMessage', e.target.value)}\n                      rows={3}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Input Placeholder\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={config.placeholder || ''}\n                      onChange={(e) => updateConfig('placeholder', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Widget Position\n                    </label>\n                    <select\n                      value={config.position}\n                      onChange={(e) => updateConfig('position', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"bottom-right\">Bottom Right</option>\n                      <option value=\"bottom-left\">Bottom Left</option>\n                      <option value=\"top-right\">Top Right</option>\n                      <option value=\"top-left\">Top Left</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Company Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={config.branding.companyName || ''}\n                      onChange={(e) => updateConfig('branding.companyName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Widget Active</label>\n                      <p className=\"text-sm text-gray-500\">Enable or disable the widget</p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={config.isActive}\n                        onChange={(e) => updateConfig('isActive', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">\n                        Show \"Powered by TekAssist\"\n                      </label>\n                      <p className=\"text-sm text-gray-500\">Display branding in the widget</p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={config.branding.showPoweredBy || false}\n                        onChange={(e) => updateConfig('branding.showPoweredBy', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'theme' && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-medium\">Theme Colors</h3>\n                    <button\n                      onClick={resetToDefaults}\n                      className=\"flex items-center space-x-2 px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n                    >\n                      <RefreshCw size={16} />\n                      <span>Reset to Defaults</span>\n                    </button>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Primary Color\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"color\"\n                          value={config.theme.primaryColor || '#3B82F6'}\n                          onChange={(e) => updateConfig('theme.primaryColor', e.target.value)}\n                          className=\"w-12 h-10 border border-gray-300 rounded cursor-pointer\"\n                        />\n                        <input\n                          type=\"text\"\n                          value={config.theme.primaryColor || '#3B82F6'}\n                          onChange={(e) => updateConfig('theme.primaryColor', e.target.value)}\n                          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Secondary Color\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"color\"\n                          value={config.theme.secondaryColor || '#EFF6FF'}\n                          onChange={(e) => updateConfig('theme.secondaryColor', e.target.value)}\n                          className=\"w-12 h-10 border border-gray-300 rounded cursor-pointer\"\n                        />\n                        <input\n                          type=\"text\"\n                          value={config.theme.secondaryColor || '#EFF6FF'}\n                          onChange={(e) => updateConfig('theme.secondaryColor', e.target.value)}\n                          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Text Color\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"color\"\n                          value={config.theme.textColor || '#1F2937'}\n                          onChange={(e) => updateConfig('theme.textColor', e.target.value)}\n                          className=\"w-12 h-10 border border-gray-300 rounded cursor-pointer\"\n                        />\n                        <input\n                          type=\"text\"\n                          value={config.theme.textColor || '#1F2937'}\n                          onChange={(e) => updateConfig('theme.textColor', e.target.value)}\n                          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Background Color\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"color\"\n                          value={config.theme.backgroundColor || '#FFFFFF'}\n                          onChange={(e) => updateConfig('theme.backgroundColor', e.target.value)}\n                          className=\"w-12 h-10 border border-gray-300 rounded cursor-pointer\"\n                        />\n                        <input\n                          type=\"text\"\n                          value={config.theme.backgroundColor || '#FFFFFF'}\n                          onChange={(e) => updateConfig('theme.backgroundColor', e.target.value)}\n                          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Border Radius\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={config.theme.borderRadius || '8px'}\n                        onChange={(e) => updateConfig('theme.borderRadius', e.target.value)}\n                        placeholder=\"8px\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Font Size\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={config.theme.fontSize || '14px'}\n                        onChange={(e) => updateConfig('theme.fontSize', e.target.value)}\n                        placeholder=\"14px\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Font Family\n                    </label>\n                    <select\n                      value={config.theme.fontFamily || 'system-ui, -apple-system, sans-serif'}\n                      onChange={(e) => updateConfig('theme.fontFamily', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"system-ui, -apple-system, sans-serif\">System Default</option>\n                      <option value=\"Inter, sans-serif\">Inter</option>\n                      <option value=\"Roboto, sans-serif\">Roboto</option>\n                      <option value=\"Open Sans, sans-serif\">Open Sans</option>\n                      <option value=\"Lato, sans-serif\">Lato</option>\n                      <option value=\"Poppins, sans-serif\">Poppins</option>\n                    </select>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'behavior' && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Auto Open Widget</label>\n                      <p className=\"text-sm text-gray-500\">\n                        Automatically open the widget when page loads\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={config.behavior.autoOpen || false}\n                        onChange={(e) => updateConfig('behavior.autoOpen', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n\n                  {config.behavior.autoOpen && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Auto Open Delay (ms)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={config.behavior.autoOpenDelay || 3000}\n                        onChange={(e) =>\n                          updateConfig('behavior.autoOpenDelay', parseInt(e.target.value))\n                        }\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Enable Sound</label>\n                      <p className=\"text-sm text-gray-500\">\n                        Play notification sounds for new messages\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={config.behavior.enableSound || false}\n                        onChange={(e) => updateConfig('behavior.enableSound', e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Typing Indicator</label>\n                      <p className=\"text-sm text-gray-500\">\n                        Show typing indicator when bot is responding\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={config.behavior.enableTypingIndicator !== false}\n                        onChange={(e) =>\n                          updateConfig('behavior.enableTypingIndicator', e.target.checked)\n                        }\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Max Height\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={config.behavior.maxHeight || '600px'}\n                        onChange={(e) => updateConfig('behavior.maxHeight', e.target.value)}\n                        placeholder=\"600px\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Max Width\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={config.behavior.maxWidth || '400px'}\n                        onChange={(e) => updateConfig('behavior.maxWidth', e.target.value)}\n                        placeholder=\"400px\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'embed' && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-medium\">Embed Code</h3>\n                      <button\n                        onClick={copyEmbedCode}\n                        className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n                      >\n                        <Copy size={16} />\n                        <span>Copy Code</span>\n                      </button>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-4\">\n                      Copy and paste this code into your website's HTML to embed the chat widget.\n                    </p>\n                    <div className=\"bg-gray-50 border rounded-lg p-4\">\n                      <pre className=\"text-sm text-gray-800 whitespace-pre-wrap overflow-x-auto\">\n                        {embedCode}\n                      </pre>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Installation Instructions</h4>\n                    <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                      <li>Copy the embed code above</li>\n                      <li>\n                        Paste it into your website's HTML, preferably before the closing\n                        &lt;/body&gt; tag\n                      </li>\n                      <li>\n                        The widget will automatically load and be positioned according to your\n                        settings\n                      </li>\n                      <li>Test the widget to ensure it's working correctly</li>\n                    </ol>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Preview Panel */}\n        {previewMode && (\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-lg shadow-sm border p-6 sticky top-6\">\n              <h3 className=\"text-lg font-medium mb-4\">Live Preview</h3>\n              <div className=\"bg-gray-100 rounded-lg p-4 min-h-[400px] relative\">\n                <p className=\"text-sm text-gray-600 text-center\">\n                  Widget preview will be displayed here\n                </p>\n                <div className=\"absolute bottom-4 right-4\">\n                  <div\n                    className=\"w-14 h-14 rounded-full shadow-lg flex items-center justify-center cursor-pointer\"\n                    style={{\n                      backgroundColor: config.theme.primaryColor || '#3B82F6',\n                      color: config.theme.buttonTextColor || '#FFFFFF',\n                    }}\n                  >\n                    💬\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\chat\\chat-widget.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setConversationId' is assigned a value but never used.",
        "line": 18,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 43
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 41,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 41,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1263, 1301], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1492, 1495], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1492, 1495], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1902, 1905], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1902, 1905], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 67,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 67,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2066, 2109], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2158, 2161], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2158, 2161], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useRef } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface Message {\n  sender: 'bot' | 'user';\n  text: string;\n  timestamp?: Date;\n}\n\nexport default function ChatWidget() {\n  const [messages, setMessages] = useState<Message[]>([\n    { sender: 'bot', text: \"Hi! I'm TekAssist. How can I help you today?\" },\n  ]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [sessionId] = useState(`session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    // Initialize WebSocket connection\n    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n    const socketInstance = io(`${apiUrl}/chat`, {\n      query: {\n        tenantId: 'default-tenant',\n        sessionId: sessionId,\n      },\n    });\n\n    socketInstance.on('connect', () => {\n      console.log('Connected to WebSocket');\n      // Join tenant room for receiving messages\n      socketInstance.emit('join_room', { tenantId: 'default-tenant', sessionId });\n    });\n\n    socketInstance.on('message_received', (data: any) => {\n      const botMessage: Message = {\n        sender: 'bot',\n        text:\n          data.content ||\n          data.message ||\n          data.response ||\n          \"Sorry, I couldn't process your request.\",\n        timestamp: new Date(data.timestamp || Date.now()),\n      };\n      setMessages((prev) => [...prev, botMessage]);\n      setIsLoading(false);\n    });\n\n    socketInstance.on('typing', (data: any) => {\n      if (data.sessionId !== sessionId) {\n        // Handle typing indicator if needed\n      }\n    });\n\n    socketInstance.on('disconnect', () => {\n      console.log('Disconnected from WebSocket');\n    });\n\n    socketInstance.on('error', (error: any) => {\n      console.error('WebSocket error:', error);\n      const errorMessage: Message = {\n        sender: 'bot',\n        text: 'Sorry, I encountered a connection error. Please try again.',\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n      setIsLoading(false);\n    });\n\n    setSocket(socketInstance);\n\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, [sessionId]);\n\n  const sendMessage = async () => {\n    if (!input.trim() || isLoading || !socket) return;\n\n    const userMessage: Message = {\n      sender: 'user',\n      text: input.trim(),\n      timestamp: new Date(),\n    };\n    setMessages((prev) => [...prev, userMessage]);\n\n    const messageContent = input.trim();\n    setInput('');\n    setIsLoading(true);\n\n    // Send message via WebSocket\n    socket.emit('send_message', {\n      id: `msg_${Date.now()}`,\n      content: messageContent,\n      direction: 'outbound',\n      timestamp: new Date(),\n      sessionId: sessionId,\n      tenantId: 'default-tenant',\n      conversationId,\n    });\n\n    // Set a timeout to handle cases where no response is received\n    setTimeout(() => {\n      if (isLoading) {\n        const timeoutMessage: Message = {\n          sender: 'bot',\n          text: 'Sorry, the response is taking longer than expected. Please try again.',\n        };\n        setMessages((prev) => [...prev, timeoutMessage]);\n        setIsLoading(false);\n      }\n    }, 30000); // 30 second timeout\n  };\n\n  return (\n    <div className=\"w-full flex items-center justify-center py-12\">\n      <div className=\"w-full max-w-3xl glass-card shadow-2xl rounded-2xl border border-gray-800\">\n        <div className=\"p-5 border-b border-gray-700 bg-tech-dark rounded-t-2xl flex items-center justify-between\">\n          <span className=\"font-bold text-2xl text-electric-blue\">TekAssist Bot</span>\n          <span className=\"text-xs text-gray-400\">AI Assistant</span>\n        </div>\n        <div className=\"p-6 h-64 overflow-y-auto bg-background text-foreground rounded-b-xl\">\n          {messages.map((msg, idx) => (\n            <div\n              key={idx}\n              className={`mb-3 flex ${msg.sender === 'bot' ? 'justify-start' : 'justify-end'}`}\n            >\n              <span\n                className={`inline-block px-4 py-2 rounded-xl shadow ${msg.sender === 'bot' ? 'bg-glass text-white' : 'bg-electric-cyan text-white'}`}\n              >\n                {msg.text}\n              </span>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"mb-3 flex justify-start\">\n              <span className=\"inline-block px-4 py-2 rounded-xl shadow bg-glass text-white\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-white rounded-full animate-bounce\"></div>\n                  <div\n                    className=\"w-2 h-2 bg-white rounded-full animate-bounce\"\n                    style={{ animationDelay: '0.1s' }}\n                  ></div>\n                  <div\n                    className=\"w-2 h-2 bg-white rounded-full animate-bounce\"\n                    style={{ animationDelay: '0.2s' }}\n                  ></div>\n                </div>\n              </span>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"p-4 flex bg-background rounded-b-2xl border-t border-gray-700\">\n          <input\n            className=\"flex-1 glass-input px-4 py-3 rounded-xl mr-3 text-foreground border border-gray-700 focus:outline-none focus:ring-2 focus:ring-electric-blue\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\n            disabled={isLoading}\n          />\n          <button\n            className=\"glass-button px-6 py-3 rounded-xl text-electric-blue font-bold shadow hover:bg-electric-blue hover:text-white transition disabled:opacity-50\"\n            onClick={sendMessage}\n            disabled={isLoading || !socket}\n          >\n            {isLoading ? '...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\cta-section.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\feature-showcase.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Zap' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Clock' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MessageSquare' is defined but never used.",
        "line": 8,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'BrainCircuit' is defined but never used.",
        "line": 9,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Sparkles' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Gauge' is defined but never used.",
        "line": 11,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { motion } from 'framer-motion';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport {\n  Zap,\n  Clock,\n  MessageSquare,\n  BrainCircuit,\n  Sparkles,\n  Gauge,\n  FileText,\n  RefreshCcw,\n  Palette,\n  BarChart3,\n  Calendar,\n} from 'lucide-react';\n\nconst features = [\n  {\n    title: 'Multi-format Training',\n    description: 'Ingest docs, links, FAQs, and structured content',\n    icon: FileText,\n  },\n  {\n    title: 'Realtime Retraining',\n    description: 'Update your assistant instantly as content changes',\n    icon: RefreshCcw,\n  },\n  {\n    title: 'Custom Branding',\n    description: 'Match colors, logo, and tone for a seamless experience',\n    icon: Palette,\n  },\n  {\n    title: 'Analytics Dashboard',\n    description: 'Track conversations, satisfaction, and conversion metrics',\n    icon: BarChart3,\n  },\n  {\n    title: 'Meeting Booking Integration',\n    description: 'Connect calendars to let users schedule appointments',\n    icon: Calendar,\n  },\n];\n\nexport default function FeatureShowcase() {\n  return (\n    <section className=\"py-20 w-full\">\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Powerful{' '}\n            <span className=\"bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n              Features\n            </span>\n          </h2>\n          <p className=\"text-xl text-foreground/70 max-w-2xl mx-auto\">\n            Discover how our AI assistant transforms your technical support experience\n          </p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n            >\n              <GlassCard className=\"h-full p-6 hover:scale-[1.02] transition-transform duration-300\">\n                <div className=\"flex flex-col h-full\">\n                  <div className=\"mb-4 p-3 rounded-full bg-gradient-to-r from-electric-blue/20 to-electric-cyan/20 w-fit\">\n                    <feature.icon className=\"h-6 w-6 text-electric-cyan\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                  <p className=\"text-foreground/70 flex-grow\">{feature.description}</p>\n                </div>\n              </GlassCard>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\hero-section.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 70,
        "column": 29,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [3221, 3306],
              "text": "\n                      Hi! I\\&apos;m TekAssist. How can I help today?\n                    "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [3221, 3306],
              "text": "\n                      Hi! I\\&lsquo;m TekAssist. How can I help today?\n                    "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [3221, 3306],
              "text": "\n                      Hi! I\\&#39;m TekAssist. How can I help today?\n                    "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [3221, 3306],
              "text": "\n                      Hi! I\\&rsquo;m TekAssist. How can I help today?\n                    "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { ArrowRight, PlayCircle } from 'lucide-react';\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative w-full py-24 md:py-32 overflow-hidden\">\n      {/* Background gradient effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-tech-dark via-tech-dark to-tech-dark/90 z-0\" />\n      <div className=\"absolute top-20 left-1/4 w-72 h-72 bg-electric-blue/20 rounded-full blur-3xl z-0\" />\n      <div className=\"absolute bottom-20 right-1/4 w-80 h-80 bg-electric-cyan/20 rounded-full blur-3xl z-0\" />\n\n      <div className=\"container mx-auto px-4 relative z-10\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          {/* Hero content */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"flex flex-col space-y-6\"\n          >\n            <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight\">\n              <span className=\"bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n                Your AI Assistant,\n              </span>{' '}\n              Trained to Know Your Business\n            </h1>\n\n            <p className=\"text-xl text-foreground/80 max-w-lg\">\n              Upload your data, train your chatbot, and embed it on your site. Realtime updates,\n              custom branding, and analytics built-in.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 pt-4\">\n              <Button size=\"lg\" variant=\"glass\" className=\"group\" asChild>\n                <a href=\"/sign-up\" className=\"inline-flex items-center\">\n                  Get Started Free\n                  <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                </a>\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" asChild>\n                <a href=\"#demo\" className=\"inline-flex items-center\">\n                  See Live Demo\n                  <PlayCircle className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n            </div>\n          </motion.div>\n\n          {/* Animated chatbot preview */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"flex justify-center lg:justify-end\"\n          >\n            <GlassCard className=\"w-full max-w-md p-1 overflow-hidden\">\n              <div className=\"relative aspect-video rounded-lg overflow-hidden bg-tech-dark/50\">\n                <div className=\"absolute inset-0 p-6\">\n                  <div className=\"space-y-3\">\n                    <motion.div\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.4 }}\n                      className=\"max-w-[70%] rounded-xl px-4 py-2 bg-glass text-white\"\n                    >\n                      Hi! I\\'m TekAssist. How can I help today?\n                    </motion.div>\n                    <motion.div\n                      initial={{ opacity: 0, x: 20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.4, delay: 0.2 }}\n                      className=\"ml-auto max-w-[65%] rounded-xl px-4 py-2 bg-electric-cyan text-white\"\n                    >\n                      Show me pricing and integration options.\n                    </motion.div>\n                    <motion.div\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.4, delay: 0.4 }}\n                      className=\"max-w-[75%] rounded-xl px-4 py-2 bg-glass text-white\"\n                    >\n                      Sure! Try our Pro plan for advanced analytics and bookings.\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute bottom-4 left-0 right-0 flex items-center justify-center\">\n                    <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-electric-blue to-electric-cyan flex items-center justify-center\">\n                      <span className=\"text-2xl font-bold\">AI</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </div>\n\n        {/* Quick highlights */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.4 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-20\"\n        >\n          {[\n            { title: 'Multi-format Training', description: 'Docs, links, FAQs, and more' },\n            { title: 'Realtime Retraining', description: 'Update content instantly as you grow' },\n            { title: 'Custom Branding', description: 'Match colors, logo, and tone of voice' },\n          ].map((item, index) => (\n            <GlassCard key={index} className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-2\">{item.title}</h3>\n              <p className=\"text-foreground/70\">{item.description}</p>\n            </GlassCard>\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\how-it-works.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\pricing-section.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\service-cards.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\testimonials.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\landing\\use-cases.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\layout\\footer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GlassCard' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 2,
        "message": "The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 103,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 106,
        "endColumn": 14
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 2,
        "message": "The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 112,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 115,
        "endColumn": 14
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 2,
        "message": "The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 125,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 128,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Link from 'next/link';\nimport { GlassCard } from '@/components/ui/glass-card';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-tech-dark py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-1\">\n            <h3 className=\"text-xl font-bold mb-4 bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n              TekAssist\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              AI-powered assistant for Tekskillz Technology providing instant support and guidance.\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link\n                  href=\"/about\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/careers\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Careers\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/blog\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Blog\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Resources</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link\n                  href=\"/documentation\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Documentation\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/help\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Help Center\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/privacy\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/terms\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  Terms of Use\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Contact</h4>\n            <ul className=\"space-y-2\">\n              <li className=\"text-muted-foreground\">Email: contact@tekskillz.com</li>\n              <li className=\"text-muted-foreground\">Phone: +1 (555) 123-4567</li>\n              <li className=\"text-muted-foreground\">\n                Address: 123 Tech Street, San Francisco, CA 94107\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border/10 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm\">\n            © {new Date().getFullYear()} TekSkillz Technology. All rights reserved.\n          </p>\n          <div className=\"flex space-x-4 mt-4 md:mt-0\">\n            <Link\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              <span className=\"sr-only\">Twitter</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" />\n              </svg>\n            </Link>\n            <Link\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              <span className=\"sr-only\">GitHub</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </Link>\n            <Link\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              <span className=\"sr-only\">LinkedIn</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\layout\\header.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronDown' is defined but never used.",
        "line": 5,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Menu, X, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\nconst navItems = [\n  { name: 'Services', href: '/services' },\n  { name: 'Pricing', href: '/pricing' },\n  { name: 'Admin', href: '/admin' },\n];\n\nexport default function Header() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 10);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <header\n      className={cn(\n        'fixed top-0 left-0 right-0 z-50 transition-all duration-300',\n        scrolled ? 'glass-effect py-2' : 'py-4'\n      )}\n    >\n      <div className=\"container mx-auto px-4 flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <span className=\"text-2xl font-bold bg-gradient-to-r from-electric-blue to-electric-cyan bg-clip-text text-transparent\">\n            TekAssist\n          </span>\n        </Link>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden md:flex items-center space-x-8\">\n          {navItems.map((item) => (\n            <Link\n              key={item.name}\n              href={item.href}\n              className=\"text-foreground/80 hover:text-foreground transition-colors\"\n            >\n              {item.name}\n            </Link>\n          ))}\n        </nav>\n\n        <div className=\"hidden md:flex items-center space-x-4\">\n          <Button variant=\"ghost\">Sign In</Button>\n          <Button variant=\"glass\">Get Started</Button>\n        </div>\n\n        {/* Mobile Navigation Toggle */}\n        <button\n          className=\"md:hidden text-foreground\"\n          onClick={() => setIsOpen(!isOpen)}\n          aria-label=\"Toggle menu\"\n        >\n          {isOpen ? <X size={24} /> : <Menu size={24} />}\n        </button>\n      </div>\n\n      {/* Mobile Navigation Menu */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"md:hidden glass-effect border-t border-border/10\"\n          >\n            <div className=\"container mx-auto px-4 py-4 flex flex-col space-y-4\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className=\"text-foreground/80 hover:text-foreground py-2 transition-colors\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  {item.name}\n                </Link>\n              ))}\n              <div className=\"flex flex-col space-y-2 pt-4 border-t border-border/10\">\n                <Button variant=\"ghost\" className=\"justify-start\">\n                  Sign In\n                </Button>\n                <Button variant=\"glass\" className=\"justify-start\">\n                  Get Started\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </header>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\layout\\main-layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\glass-card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\glass-input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\loading-spinner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\modal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'motion' is defined but never used.",
        "line": 7,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AnimatePresence' is defined but never used.",
        "line": 7,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = (props: DialogPrimitive.DialogPortalProps) => (\n  <DialogPrimitive.Portal {...props} />\n);\nDialogPortal.displayName = DialogPrimitive.Portal.displayName;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 bg-black/50 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'glass-effect fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\skeleton-loader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\skip-to-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\toast.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\toaster.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\tooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\ui\\use-toast.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\widget\\chat-widget-standalone.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setConversationId' is assigned a value but never used.",
        "line": 71,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setCurrentSessionId' is assigned a value but never used.",
        "line": 72,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 47
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 126,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 126,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4063, 4101], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4282, 4285], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4282, 4285], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4625, 4628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4625, 4628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 149,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 149,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4787, 4830], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'onMessage'. Either include it or remove the dependency array. If 'onMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
        "line": 157,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 157,
        "endColumn": 42,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [apiUrl, tenantId, currentSessionId, onMessage]",
            "fix": {
              "range": [4938, 4974],
              "text": "[apiUrl, tenantId, currentSessionId, onMessage]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadConfig'. Either include it or remove the dependency array.",
        "line": 172,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 172,
        "endColumn": 16,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadConfig, tenantId]",
            "fix": { "range": [5230, 5240], "text": "[loadConfig, tenantId]" }
          }
        ]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 332,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 332,
        "endColumn": 95
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Send, X, Minimize2, MessageCircle, Bot, User } from 'lucide-react';\nimport { ThemeEngine, AdvancedThemeConfig } from '../../lib/theme-engine';\nimport { io, Socket } from 'socket.io-client';\n\ninterface Message {\n  id: string;\n  content: string;\n  direction: 'inbound' | 'outbound';\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\ninterface WidgetConfig {\n  title: string;\n  welcomeMessage?: string;\n  placeholder?: string;\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  theme: {\n    primaryColor?: string;\n    secondaryColor?: string;\n    textColor?: string;\n    backgroundColor?: string;\n    borderRadius?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    buttonColor?: string;\n    buttonTextColor?: string;\n    headerColor?: string;\n    headerTextColor?: string;\n  };\n  branding: {\n    logo?: string;\n    companyName?: string;\n    showPoweredBy?: boolean;\n  };\n  behavior: {\n    autoOpen?: boolean;\n    autoOpenDelay?: number;\n    enableSound?: boolean;\n    enableTypingIndicator?: boolean;\n    maxHeight?: string;\n    maxWidth?: string;\n  };\n}\n\ninterface ChatWidgetStandaloneProps {\n  tenantId: string;\n  apiUrl: string;\n  sessionId?: string;\n  onMessage?: (message: Message) => void;\n  onConfigLoad?: (config: WidgetConfig) => void;\n}\n\nexport default function ChatWidgetStandalone({\n  tenantId,\n  apiUrl,\n  sessionId,\n  onMessage,\n  onConfigLoad,\n}: ChatWidgetStandaloneProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [config, setConfig] = useState<WidgetConfig | null>(null);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [currentSessionId, setCurrentSessionId] = useState(sessionId || generateSessionId());\n  const [themeEngine, setThemeEngine] = useState<ThemeEngine | null>(null);\n  const [socket, setSocket] = useState<Socket | null>(null);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  function generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // Update theme when config changes\n  useEffect(() => {\n    if (themeEngine && config?.theme) {\n      const themeConfig: AdvancedThemeConfig = {\n        ...config.theme,\n        components: {\n          chatBubble: {\n            ...(config.theme.primaryColor && { userBubbleColor: config.theme.primaryColor }),\n            ...(config.theme.secondaryColor && { botBubbleColor: config.theme.secondaryColor }),\n            ...(config.theme.buttonTextColor && { userTextColor: config.theme.buttonTextColor }),\n            ...(config.theme.textColor && { botTextColor: config.theme.textColor }),\n          },\n          input: {\n            ...(config.theme.backgroundColor && { backgroundColor: config.theme.backgroundColor }),\n            ...(config.theme.secondaryColor && { borderColor: config.theme.secondaryColor }),\n            ...(config.theme.primaryColor && { focusBorderColor: config.theme.primaryColor }),\n          },\n          button: {\n            ...(config.theme.primaryColor && { hoverColor: config.theme.primaryColor }),\n          },\n          header: {\n            gradient: `linear-gradient(135deg, ${config.theme.headerColor} 0%, ${config.theme.primaryColor} 100%)`,\n          },\n        },\n      };\n      themeEngine.applyTheme(themeConfig);\n    }\n  }, [themeEngine, config]);\n\n  useEffect(() => {\n    // Initialize WebSocket connection\n    const socketInstance = io(apiUrl, {\n      query: {\n        tenantId,\n        sessionId: currentSessionId,\n      },\n    });\n\n    socketInstance.on('connect', () => {\n      console.log('Connected to WebSocket');\n      // Join tenant room for receiving messages\n      socketInstance.emit('joinRoom', { tenantId, sessionId: currentSessionId });\n    });\n\n    socketInstance.on('message', (data: any) => {\n      const botMessage: Message = {\n        id: data.messageId || `bot_${Date.now()}`,\n        content: data.message,\n        direction: 'inbound',\n        timestamp: new Date(data.timestamp),\n      };\n      setMessages((prev) => [...prev, botMessage]);\n      onMessage?.(botMessage);\n    });\n\n    socketInstance.on('typing', (data: any) => {\n      if (data.sessionId !== currentSessionId) {\n        setIsTyping(data.isTyping);\n      }\n    });\n\n    socketInstance.on('disconnect', () => {\n      console.log('Disconnected from WebSocket');\n    });\n\n    setSocket(socketInstance);\n\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, [apiUrl, tenantId, currentSessionId]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    loadConfig();\n    // Initialize theme engine\n    const engine = new ThemeEngine();\n    setThemeEngine(engine);\n\n    return () => {\n      engine.destroy();\n    };\n  }, [tenantId]);\n\n  useEffect(() => {\n    if (config?.behavior?.autoOpen && config.behavior.autoOpenDelay) {\n      const timer = setTimeout(() => {\n        setIsOpen(true);\n      }, config.behavior.autoOpenDelay);\n      return () => clearTimeout(timer);\n    }\n    return undefined;\n  }, [config]);\n\n  const loadConfig = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/widget-config/public/${tenantId}`);\n      if (response.ok) {\n        const widgetConfig = await response.json();\n        setConfig(widgetConfig);\n        onConfigLoad?.(widgetConfig);\n\n        // Add welcome message if configured\n        if (widgetConfig.welcomeMessage) {\n          const welcomeMessage: Message = {\n            id: `welcome_${Date.now()}`,\n            content: widgetConfig.welcomeMessage,\n            direction: 'inbound',\n            timestamp: new Date(),\n          };\n          setMessages([welcomeMessage]);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load widget config:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !socket) return;\n\n    const userMessage: Message = {\n      id: `msg_${Date.now()}`,\n      content: inputValue.trim(),\n      direction: 'outbound',\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    const messageContent = inputValue.trim();\n    setInputValue('');\n    setIsLoading(true);\n\n    onMessage?.(userMessage);\n\n    // Send message via WebSocket\n    socket.emit('message', {\n      message: messageContent,\n      tenantId,\n      sessionId: currentSessionId,\n      conversationId,\n    });\n\n    // Set loading to false after a short delay (will be updated when response arrives)\n    setTimeout(() => setIsLoading(false), 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const toggleWidget = () => {\n    setIsOpen(!isOpen);\n    setIsMinimized(false);\n  };\n\n  const minimizeWidget = () => {\n    setIsMinimized(true);\n  };\n\n  const closeWidget = () => {\n    setIsOpen(false);\n    setIsMinimized(false);\n  };\n\n  if (!config) {\n    return null;\n  }\n\n  const theme = config.theme || {};\n  const position = config.position || 'bottom-right';\n  const maxHeight = config.behavior?.maxHeight || '600px';\n  const maxWidth = config.behavior?.maxWidth || '400px';\n\n  const positionClasses = {\n    'bottom-right': 'bottom-4 right-4',\n    'bottom-left': 'bottom-4 left-4',\n    'top-right': 'top-4 right-4',\n    'top-left': 'top-4 left-4',\n  };\n\n  const widgetStyles = {\n    '--primary-color': theme.primaryColor || '#3B82F6',\n    '--secondary-color': theme.secondaryColor || '#EFF6FF',\n    '--text-color': theme.textColor || '#1F2937',\n    '--background-color': theme.backgroundColor || '#FFFFFF',\n    '--border-radius': theme.borderRadius || '8px',\n    '--font-family': theme.fontFamily || 'system-ui, -apple-system, sans-serif',\n    '--font-size': theme.fontSize || '14px',\n    '--button-color': theme.buttonColor || '#3B82F6',\n    '--button-text-color': theme.buttonTextColor || '#FFFFFF',\n    '--header-color': theme.headerColor || '#3B82F6',\n    '--header-text-color': theme.headerTextColor || '#FFFFFF',\n  } as React.CSSProperties;\n\n  return (\n    <div className={`fixed z-50 ${positionClasses[position]}`} style={widgetStyles}>\n      {/* Chat Button */}\n      {!isOpen && (\n        <button\n          onClick={toggleWidget}\n          className=\"w-14 h-14 rounded-full shadow-lg flex items-center justify-center transition-all duration-200 hover:scale-110\"\n          style={{\n            backgroundColor: 'var(--button-color)',\n            color: 'var(--button-text-color)',\n          }}\n        >\n          <MessageCircle size={24} />\n        </button>\n      )}\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div\n          className={`bg-white rounded-lg shadow-2xl transition-all duration-300 ${\n            isMinimized ? 'h-12' : ''\n          }`}\n          style={{\n            width: maxWidth,\n            height: isMinimized ? '48px' : maxHeight,\n            maxHeight,\n            fontFamily: 'var(--font-family)',\n            fontSize: 'var(--font-size)',\n            borderRadius: 'var(--border-radius)',\n            backgroundColor: 'var(--background-color)',\n            color: 'var(--text-color)',\n          }}\n        >\n          {/* Header */}\n          <div\n            className=\"flex items-center justify-between p-4 rounded-t-lg\"\n            style={{\n              backgroundColor: 'var(--header-color)',\n              color: 'var(--header-text-color)',\n              borderRadius: `var(--border-radius) var(--border-radius) 0 0`,\n            }}\n          >\n            <div className=\"flex items-center space-x-2\">\n              {config.branding?.logo && (\n                <img src={config.branding.logo} alt=\"Logo\" className=\"w-6 h-6 rounded-full\" />\n              )}\n              <h3 className=\"font-semibold text-sm\">{config.title}</h3>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <button\n                onClick={minimizeWidget}\n                className=\"p-1 hover:bg-black/10 rounded transition-colors\"\n              >\n                <Minimize2 size={16} />\n              </button>\n              <button\n                onClick={closeWidget}\n                className=\"p-1 hover:bg-black/10 rounded transition-colors\"\n              >\n                <X size={16} />\n              </button>\n            </div>\n          </div>\n\n          {/* Messages */}\n          {!isMinimized && (\n            <>\n              <div\n                className=\"flex-1 overflow-y-auto p-4 space-y-3\"\n                style={{ height: 'calc(100% - 120px)' }}\n              >\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.direction === 'outbound' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div className=\"flex items-start space-x-2 max-w-[80%]\">\n                      {message.direction === 'inbound' && (\n                        <div\n                          className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0\"\n                          style={{ backgroundColor: 'var(--secondary-color)' }}\n                        >\n                          <Bot size={14} style={{ color: 'var(--primary-color)' }} />\n                        </div>\n                      )}\n                      <div\n                        className={`px-3 py-2 rounded-lg text-sm ${\n                          message.direction === 'outbound' ? 'text-white' : 'border'\n                        }`}\n                        style={{\n                          backgroundColor:\n                            message.direction === 'outbound'\n                              ? 'var(--primary-color)'\n                              : 'var(--background-color)',\n                          color:\n                            message.direction === 'outbound'\n                              ? 'var(--button-text-color)'\n                              : 'var(--text-color)',\n                          borderColor:\n                            message.direction === 'inbound'\n                              ? 'var(--secondary-color)'\n                              : 'transparent',\n                          borderRadius: 'var(--border-radius)',\n                        }}\n                      >\n                        {message.content}\n                      </div>\n                      {message.direction === 'outbound' && (\n                        <div\n                          className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0\"\n                          style={{ backgroundColor: 'var(--secondary-color)' }}\n                        >\n                          <User size={14} style={{ color: 'var(--primary-color)' }} />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n\n                {isTyping && config.behavior?.enableTypingIndicator && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"flex items-start space-x-2\">\n                      <div\n                        className=\"w-6 h-6 rounded-full flex items-center justify-center\"\n                        style={{ backgroundColor: 'var(--secondary-color)' }}\n                      >\n                        <Bot size={14} style={{ color: 'var(--primary-color)' }} />\n                      </div>\n                      <div\n                        className=\"px-3 py-2 rounded-lg border\"\n                        style={{\n                          backgroundColor: 'var(--background-color)',\n                          borderColor: 'var(--secondary-color)',\n                          borderRadius: 'var(--border-radius)',\n                        }}\n                      >\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                          <div\n                            className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                            style={{ animationDelay: '0.1s' }}\n                          ></div>\n                          <div\n                            className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                            style={{ animationDelay: '0.2s' }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n\n              {/* Input */}\n              <div className=\"p-4 border-t\">\n                <div className=\"flex space-x-2\">\n                  <input\n                    ref={inputRef}\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder={config.placeholder || 'Type your message...'}\n                    disabled={isLoading}\n                    className=\"flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 text-sm\"\n                    style={{\n                      borderColor: 'var(--secondary-color)',\n                      borderRadius: 'var(--border-radius)',\n                      fontSize: 'var(--font-size)',\n                    }}\n                  />\n                  <button\n                    onClick={sendMessage}\n                    disabled={isLoading || !inputValue.trim()}\n                    className=\"px-3 py-2 rounded-lg transition-colors disabled:opacity-50\"\n                    style={{\n                      backgroundColor: 'var(--button-color)',\n                      color: 'var(--button-text-color)',\n                      borderRadius: 'var(--border-radius)',\n                    }}\n                  >\n                    <Send size={16} />\n                  </button>\n                </div>\n              </div>\n\n              {/* Powered By */}\n              {config.branding?.showPoweredBy && (\n                <div className=\"px-4 pb-2\">\n                  <div className=\"text-xs text-gray-500 text-center\">\n                    Powered by{' '}\n                    <a\n                      href=\"https://tekassist.com\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"hover:underline\"\n                      style={{ color: 'var(--primary-color)' }}\n                    >\n                      TekAssist\n                    </a>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\widget\\widget-bundle.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1179, 1182], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1179, 1182], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1209, 1212], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1209, 1212], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1282, 1285], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1282, 1285], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1373, 1376], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1373, 1376], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 62,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 62,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1487, 1490], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1487, 1490], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 187,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 187,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5006, 5009], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5006, 5009], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 286,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 286,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7499, 7568], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport ChatWidgetStandalone from './chat-widget-standalone';\nimport {\n  WidgetMessaging,\n  WidgetMessageTypes,\n  createWidgetMessage,\n} from '../../lib/widget-messaging';\n\ninterface WidgetConfig {\n  title: string;\n  welcomeMessage?: string;\n  placeholder?: string;\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  theme: {\n    primaryColor?: string;\n    secondaryColor?: string;\n    textColor?: string;\n    backgroundColor?: string;\n    borderRadius?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    buttonColor?: string;\n    buttonTextColor?: string;\n    headerColor?: string;\n    headerTextColor?: string;\n  };\n  branding: {\n    logo?: string;\n    companyName?: string;\n    showPoweredBy?: boolean;\n  };\n  behavior: {\n    autoOpen?: boolean;\n    autoOpenDelay?: number;\n    enableSound?: boolean;\n    enableTypingIndicator?: boolean;\n    maxHeight?: string;\n    maxWidth?: string;\n  };\n}\n\ninterface WidgetOptions {\n  container: HTMLElement;\n  tenantId: string;\n  apiUrl: string;\n  sessionId?: string;\n  customerId?: string;\n  metadata?: Record<string, any>;\n  onMessage?: (message: any) => void;\n  onResize?: (height: number) => void;\n  onError?: (error: any) => void;\n}\n\nclass TekAssistWidget {\n  private container: HTMLElement;\n  private root: any;\n  private messaging: WidgetMessaging;\n  private options: WidgetOptions;\n  private widgetRef: React.RefObject<any>;\n  private config: WidgetConfig | null = null;\n  private isInitialized = false;\n\n  constructor(options: WidgetOptions) {\n    this.options = options;\n    this.container = options.container;\n    this.widgetRef = React.createRef();\n    this.messaging = new WidgetMessaging();\n\n    this.setupMessaging();\n  }\n\n  private setupMessaging(): void {\n    this.messaging.init();\n\n    // Handle messages from parent window\n    this.messaging.on(WidgetMessageTypes.UPDATE_CONFIG, (message) => {\n      this.updateConfig(message.data);\n    });\n\n    this.messaging.on(WidgetMessageTypes.SEND_MESSAGE, (message) => {\n      this.sendMessage(message.data.message);\n    });\n\n    this.messaging.on(WidgetMessageTypes.OPEN_WIDGET, () => {\n      this.open();\n    });\n\n    this.messaging.on(WidgetMessageTypes.CLOSE_WIDGET, () => {\n      this.close();\n    });\n\n    this.messaging.on(WidgetMessageTypes.RESET_CONVERSATION, () => {\n      this.resetConversation();\n    });\n  }\n\n  async init(): Promise<void> {\n    try {\n      // Load configuration\n      await this.loadConfig();\n\n      // Create React root and render widget\n      this.root = createRoot(this.container);\n      this.renderWidget();\n\n      this.isInitialized = true;\n\n      // Notify parent that widget is ready\n      this.messaging.sendToParent(\n        createWidgetMessage(WidgetMessageTypes.WIDGET_READY, {\n          tenantId: this.options.tenantId,\n          sessionId: this.options.sessionId,\n        })\n      );\n\n      // Initial resize notification\n      this.notifyResize();\n    } catch (error) {\n      console.error('Widget initialization failed:', error);\n      this.messaging.sendToParent(\n        createWidgetMessage(WidgetMessageTypes.WIDGET_ERROR, {\n          message: error instanceof Error ? error.message : 'Unknown initialization error',\n        })\n      );\n      throw error;\n    }\n  }\n\n  private async loadConfig(): Promise<void> {\n    try {\n      const response = await fetch(\n        `${this.options.apiUrl}/widget-config/public/${this.options.tenantId}`\n      );\n      if (!response.ok) {\n        throw new Error(`Failed to load config: ${response.status}`);\n      }\n      this.config = await response.json();\n    } catch (error) {\n      console.error('Failed to load widget config:', error);\n      // Use default config\n      this.config = this.getDefaultConfig();\n    }\n  }\n\n  private getDefaultConfig(): WidgetConfig {\n    return {\n      title: 'Chat Support',\n      welcomeMessage: 'Hello! How can I help you today?',\n      placeholder: 'Type your message...',\n      position: 'bottom-right',\n      theme: {\n        primaryColor: '#3B82F6',\n        secondaryColor: '#EFF6FF',\n        textColor: '#1F2937',\n        backgroundColor: '#FFFFFF',\n        borderRadius: '8px',\n        fontFamily: 'system-ui, -apple-system, sans-serif',\n        fontSize: '14px',\n        buttonColor: '#3B82F6',\n        buttonTextColor: '#FFFFFF',\n        headerColor: '#3B82F6',\n        headerTextColor: '#FFFFFF',\n      },\n      branding: {\n        showPoweredBy: true,\n      },\n      behavior: {\n        autoOpen: false,\n        enableTypingIndicator: true,\n        maxHeight: '600px',\n        maxWidth: '400px',\n      },\n    };\n  }\n\n  private renderWidget(): void {\n    if (!this.root || !this.config) return;\n\n    this.root.render(\n      React.createElement(ChatWidgetStandalone, {\n        tenantId: this.options.tenantId,\n        apiUrl: this.options.apiUrl,\n        ...(this.options.sessionId && { sessionId: this.options.sessionId }),\n        onMessage: (message: any) => {\n          this.options.onMessage?.(message);\n          this.messaging.sendToParent(\n            createWidgetMessage(WidgetMessageTypes.WIDGET_MESSAGE, message)\n          );\n        },\n        onConfigLoad: (config: WidgetConfig) => {\n          this.config = config;\n          this.notifyResize();\n        },\n      })\n    );\n  }\n\n  private notifyResize(): void {\n    // Use ResizeObserver for accurate height detection\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const height = entry.contentRect.height;\n        this.options.onResize?.(height);\n        this.messaging.sendToParent(\n          createWidgetMessage(WidgetMessageTypes.WIDGET_RESIZE, { height })\n        );\n      }\n    });\n\n    resizeObserver.observe(this.container);\n  }\n\n  updateConfig(newConfig: Partial<WidgetConfig>): void {\n    if (!this.config) return;\n\n    this.config = { ...this.config, ...newConfig };\n    this.renderWidget();\n\n    this.messaging.sendToParent(\n      createWidgetMessage(WidgetMessageTypes.CONFIG_UPDATED, this.config)\n    );\n  }\n\n  sendMessage(message: string): void {\n    if (this.widgetRef.current && this.widgetRef.current.sendMessage) {\n      this.widgetRef.current.sendMessage(message);\n    }\n  }\n\n  open(): void {\n    if (this.widgetRef.current && this.widgetRef.current.open) {\n      this.widgetRef.current.open();\n    }\n  }\n\n  close(): void {\n    if (this.widgetRef.current && this.widgetRef.current.close) {\n      this.widgetRef.current.close();\n    }\n  }\n\n  resetConversation(): void {\n    if (this.widgetRef.current && this.widgetRef.current.resetConversation) {\n      this.widgetRef.current.resetConversation();\n    }\n\n    this.messaging.sendToParent(createWidgetMessage(WidgetMessageTypes.CONVERSATION_RESET));\n  }\n\n  destroy(): void {\n    if (this.root) {\n      this.root.unmount();\n    }\n\n    this.messaging.destroy();\n    this.isInitialized = false;\n  }\n\n  getConfig(): WidgetConfig | null {\n    return this.config;\n  }\n\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n}\n\n// Make TekAssistWidget available globally\ndeclare global {\n  interface Window {\n    TekAssistWidget: typeof TekAssistWidget;\n    widgetInstance?: TekAssistWidget;\n  }\n}\n\nwindow.TekAssistWidget = TekAssistWidget;\n\n// Auto-initialize if container is found\ndocument.addEventListener('DOMContentLoaded', () => {\n  const container = document.getElementById('widget-root');\n  if (container) {\n    // This will be handled by embed.html\n    console.log('Widget container found, waiting for initialization...');\n  }\n});\n\nexport default TekAssistWidget;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\widget\\widget-iframe.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [236, 239], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [236, 239], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [404, 407], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [404, 407], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [434, 437], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [434, 437], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 107,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 107,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2699, 2749], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2986, 2989], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2986, 2989], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 124,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 124,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3146, 3149], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3146, 3149], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 199,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 199,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4839, 4905], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\n\ninterface WidgetMessage {\n  type:\n    | 'WIDGET_READY'\n    | 'WIDGET_RESIZE'\n    | 'WIDGET_MESSAGE'\n    | 'WIDGET_CONFIG_UPDATE'\n    | 'WIDGET_ERROR';\n  data?: any;\n  source?: string;\n}\n\ninterface WidgetIframeProps {\n  tenantId: string;\n  apiUrl: string;\n  sessionId?: string;\n  customerId?: string;\n  metadata?: Record<string, any>;\n  onMessage?: (message: any) => void;\n  onReady?: () => void;\n  onError?: (error: string) => void;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport default function WidgetIframe({\n  tenantId,\n  apiUrl,\n  sessionId,\n  customerId,\n  metadata,\n  onMessage,\n  onReady,\n  onError,\n  className = '',\n  style = {},\n}: WidgetIframeProps) {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [widgetUrl, setWidgetUrl] = useState<string>('');\n\n  useEffect(() => {\n    // Construct widget URL with parameters\n    const params = new URLSearchParams({\n      tenantId,\n      apiUrl,\n      ...(sessionId && { sessionId }),\n      ...(customerId && { customerId }),\n      ...(metadata && { metadata: JSON.stringify(metadata) }),\n    });\n\n    // In production, this would be your CDN URL\n    const baseUrl =\n      process.env.NODE_ENV === 'production'\n        ? 'https://cdn.tekassist.com/widget'\n        : `${window.location.origin}/widget`;\n\n    setWidgetUrl(`${baseUrl}/embed.html?${params.toString()}`);\n  }, [tenantId, apiUrl, sessionId, customerId, metadata]);\n\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent<WidgetMessage>) => {\n      // Verify origin for security\n      const allowedOrigins = [\n        window.location.origin,\n        'https://cdn.tekassist.com',\n        'http://localhost:3000',\n        'http://localhost:3001',\n      ];\n\n      if (!allowedOrigins.includes(event.origin)) {\n        console.warn('Received message from unauthorized origin:', event.origin);\n        return;\n      }\n\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'WIDGET_READY':\n          setIsReady(true);\n          onReady?.();\n          break;\n\n        case 'WIDGET_RESIZE':\n          if (iframeRef.current && data?.height) {\n            iframeRef.current.style.height = `${data.height}px`;\n          }\n          break;\n\n        case 'WIDGET_MESSAGE':\n          onMessage?.(data);\n          break;\n\n        case 'WIDGET_ERROR':\n          console.error('Widget error:', data);\n          onError?.(data?.message || 'Unknown widget error');\n          break;\n\n        case 'WIDGET_CONFIG_UPDATE':\n          // Handle configuration updates if needed\n          break;\n\n        default:\n          console.log('Unknown widget message type:', type);\n      }\n    };\n\n    window.addEventListener('message', handleMessage);\n\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [onMessage, onReady, onError]);\n\n  const sendMessageToWidget = (message: any) => {\n    if (iframeRef.current && isReady) {\n      iframeRef.current.contentWindow?.postMessage(message, '*');\n    }\n  };\n\n  const updateConfig = (config: any) => {\n    sendMessageToWidget({\n      type: 'UPDATE_CONFIG',\n      data: config,\n    });\n  };\n\n  const sendChatMessage = (message: string) => {\n    sendMessageToWidget({\n      type: 'SEND_MESSAGE',\n      data: { message },\n    });\n  };\n\n  const openWidget = () => {\n    sendMessageToWidget({\n      type: 'OPEN_WIDGET',\n    });\n  };\n\n  const closeWidget = () => {\n    sendMessageToWidget({\n      type: 'CLOSE_WIDGET',\n    });\n  };\n\n  const resetConversation = () => {\n    sendMessageToWidget({\n      type: 'RESET_CONVERSATION',\n    });\n  };\n\n  // Expose methods for parent component\n  React.useImperativeHandle(null, () => ({\n    sendMessage: sendChatMessage,\n    updateConfig,\n    openWidget,\n    closeWidget,\n    resetConversation,\n    isReady,\n  }));\n\n  if (!widgetUrl) {\n    return null;\n  }\n\n  return (\n    <iframe\n      ref={iframeRef}\n      src={widgetUrl}\n      className={`widget-iframe ${className}`}\n      style={{\n        border: 'none',\n        width: '100%',\n        height: '600px',\n        ...style,\n      }}\n      allow=\"clipboard-write; microphone; camera\"\n      sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox\"\n      loading=\"lazy\"\n      title=\"TekAssist Chat Widget\"\n    />\n  );\n}\n\n// Export utility functions for external use\nexport const WidgetAPI = {\n  createWidget: (containerId: string, config: WidgetIframeProps) => {\n    const container = document.getElementById(containerId);\n    if (!container) {\n      throw new Error(`Container with id \"${containerId}\" not found`);\n    }\n\n    // This would be implemented with a framework-agnostic approach\n    // For now, it's a placeholder for the actual implementation\n    console.log('Creating widget in container:', containerId, config);\n  },\n\n  destroyWidget: (containerId: string) => {\n    const container = document.getElementById(containerId);\n    if (container) {\n      container.innerHTML = '';\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\components\\widget\\widget-snippet-generator.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Settings' is defined but never used.",
        "line": 4,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [814, 817], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [814, 817], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'widgetConfig' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'activeTab' is assigned a value but never used.",
        "line": 56,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'generateSnippet'. Either include it or remove the dependency array.",
        "line": 60,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 60,
        "endColumn": 33,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [options, tenantId, apiUrl, generateSnippet]",
            "fix": {
              "range": [1398, 1425],
              "text": "[options, tenantId, apiUrl, generateSnippet]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 254,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 254,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6930, 6933], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6930, 6933], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 258,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 258,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7060, 7063], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7060, 7063], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 305,
        "column": 81,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 305,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8811, 8814], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8811, 8814], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 371,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 371,
        "endColumn": 83
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 385,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 385,
        "endColumn": 83
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must have accessible text.",
        "line": 425,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 425,
        "endColumn": 89
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Copy, Download, Code, Globe, Smartphone, Monitor, Settings } from 'lucide-react';\n\ninterface SnippetOptions {\n  integration: 'script' | 'iframe' | 'npm' | 'cdn';\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'custom';\n  theme: 'light' | 'dark' | 'auto' | 'custom';\n  size: 'small' | 'medium' | 'large' | 'custom';\n  customPosition?: {\n    bottom?: string;\n    right?: string;\n    top?: string;\n    left?: string;\n  };\n  customSize?: {\n    width?: string;\n    height?: string;\n  };\n  features: {\n    autoOpen?: boolean;\n    sound?: boolean;\n    typing?: boolean;\n    fileUpload?: boolean;\n    emoji?: boolean;\n  };\n}\n\ninterface WidgetSnippetGeneratorProps {\n  tenantId: string;\n  apiUrl: string;\n  widgetConfig?: any;\n}\n\nexport default function WidgetSnippetGenerator({\n  tenantId,\n  apiUrl,\n  widgetConfig,\n}: WidgetSnippetGeneratorProps) {\n  const [options, setOptions] = useState<SnippetOptions>({\n    integration: 'script',\n    position: 'bottom-right',\n    theme: 'light',\n    size: 'medium',\n    features: {\n      autoOpen: false,\n      sound: true,\n      typing: true,\n      fileUpload: false,\n      emoji: true,\n    },\n  });\n\n  const [generatedCode, setGeneratedCode] = useState('');\n  const [activeTab, setActiveTab] = useState('script');\n\n  useEffect(() => {\n    generateSnippet();\n  }, [options, tenantId, apiUrl]);\n\n  const generateSnippet = () => {\n    let code = '';\n\n    switch (options.integration) {\n      case 'script':\n        code = generateScriptSnippet();\n        break;\n      case 'iframe':\n        code = generateIframeSnippet();\n        break;\n      case 'npm':\n        code = generateNpmSnippet();\n        break;\n      case 'cdn':\n        code = generateCdnSnippet();\n        break;\n    }\n\n    setGeneratedCode(code);\n  };\n\n  const generateScriptSnippet = () => {\n    const config = {\n      tenantId,\n      apiUrl,\n      position: options.position,\n      theme: options.theme,\n      size: options.size,\n      ...options.features,\n      ...(options.customPosition && { customPosition: options.customPosition }),\n      ...(options.customSize && { customSize: options.customSize }),\n    };\n\n    return `<!-- TekAssist Chat Widget -->\n<script>\n  (function() {\n    // Widget configuration\n    window.TekAssistConfig = ${JSON.stringify(config, null, 4)};\n    \n    // Load widget script\n    var script = document.createElement('script');\n    script.src = '${window.location.origin}/widget/embed.js';\n    script.async = true;\n    script.onload = function() {\n      if (typeof TekAssistWidget !== 'undefined') {\n        TekAssistWidget.init(window.TekAssistConfig);\n      }\n    };\n    \n    // Insert script into page\n    var firstScript = document.getElementsByTagName('script')[0];\n    firstScript.parentNode.insertBefore(script, firstScript);\n  })();\n</script>\n\n<!-- Widget container -->\n<div id=\"tekassist-widget-container\"></div>`;\n  };\n\n  const generateIframeSnippet = () => {\n    const params = new URLSearchParams({\n      tenantId,\n      apiUrl,\n      position: options.position,\n      theme: options.theme,\n      size: options.size,\n      autoOpen: options.features.autoOpen?.toString() || 'false',\n      sound: options.features.sound?.toString() || 'true',\n      typing: options.features.typing?.toString() || 'true',\n    });\n\n    return `<!-- TekAssist Chat Widget (iframe) -->\n<iframe\n  id=\"tekassist-widget-iframe\"\n  src=\"${window.location.origin}/widget/embed.html?${params.toString()}\"\n  style=\"\n    position: fixed;\n    ${options.position === 'bottom-right' ? 'bottom: 20px; right: 20px;' : ''}\n    ${options.position === 'bottom-left' ? 'bottom: 20px; left: 20px;' : ''}\n    ${options.position === 'top-right' ? 'top: 20px; right: 20px;' : ''}\n    ${options.position === 'top-left' ? 'top: 20px; left: 20px;' : ''}\n    width: ${options.size === 'small' ? '300px' : options.size === 'large' ? '450px' : '400px'};\n    height: ${options.size === 'small' ? '400px' : options.size === 'large' ? '700px' : '600px'};\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n    z-index: 9999;\n    background: transparent;\n  \"\n  allow=\"microphone; camera; geolocation\"\n  sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups\"\n></iframe>`;\n  };\n\n  const generateNpmSnippet = () => {\n    return `// Install TekAssist Widget\nnpm install @tekassist/widget\n\n// React Component Usage\nimport React from 'react';\nimport { TekAssistWidget } from '@tekassist/widget';\n\nfunction App() {\n  const widgetConfig = {\n    tenantId: '${tenantId}',\n    apiUrl: '${apiUrl}',\n    position: '${options.position}',\n    theme: '${options.theme}',\n    size: '${options.size}',\n    features: ${JSON.stringify(options.features, null, 6)}\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Your app content */}\n      \n      <TekAssistWidget config={widgetConfig} />\n    </div>\n  );\n}\n\nexport default App;\n\n// Or use the hook for more control\nimport { useTekAssistWidget } from '@tekassist/widget';\n\nfunction MyComponent() {\n  const { openWidget, closeWidget, sendMessage } = useTekAssistWidget({\n    tenantId: '${tenantId}',\n    apiUrl: '${apiUrl}',\n    // ... other config options\n  });\n\n  return (\n    <div>\n      <button onClick={openWidget}>Open Chat</button>\n      <button onClick={closeWidget}>Close Chat</button>\n      <button onClick={() => sendMessage('Hello!')}>Send Message</button>\n    </div>\n  );\n}`;\n  };\n\n  const generateCdnSnippet = () => {\n    const config = {\n      tenantId,\n      apiUrl,\n      position: options.position,\n      theme: options.theme,\n      size: options.size,\n      ...options.features,\n    };\n\n    return `<!-- TekAssist Widget via CDN -->\n<script src=\"https://cdn.tekassist.com/widget/v1/tekassist-widget.min.js\"></script>\n<script>\n  // Initialize widget when DOM is ready\n  document.addEventListener('DOMContentLoaded', function() {\n    TekAssistWidget.init(${JSON.stringify(config, null, 4)});\n  });\n</script>\n\n<!-- Optional: Custom styling -->\n<style>\n  .tekassist-widget {\n    /* Custom widget styles */\n    --tekassist-primary-color: #3B82F6;\n    --tekassist-secondary-color: #EFF6FF;\n    --tekassist-text-color: #1F2937;\n    --tekassist-background-color: #FFFFFF;\n  }\n</style>`;\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generatedCode);\n    // You could add a toast notification here\n    alert('Code copied to clipboard!');\n  };\n\n  const downloadSnippet = () => {\n    const blob = new Blob([generatedCode], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `tekassist-widget-${options.integration}.${options.integration === 'npm' ? 'js' : 'html'}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const updateOption = (path: string, value: any) => {\n    setOptions((prev) => {\n      const keys = path.split('.');\n      const newOptions = { ...prev };\n      let current: any = newOptions;\n\n      for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        if (key) {\n          current[key] = { ...current[key] };\n          current = current[key];\n        }\n      }\n\n      const lastKey = keys[keys.length - 1];\n      if (lastKey) {\n        current[lastKey] = value;\n      }\n      return newOptions;\n    });\n  };\n\n  const integrationTabs = [\n    { id: 'script', label: 'Script Tag', icon: Code, description: 'Simple script tag integration' },\n    { id: 'iframe', label: 'iFrame', icon: Globe, description: 'Embedded iframe widget' },\n    { id: 'npm', label: 'NPM/React', icon: Monitor, description: 'React component package' },\n    { id: 'cdn', label: 'CDN', icon: Smartphone, description: 'CDN hosted widget' },\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Widget Snippet Generator</h1>\n        <p className=\"text-gray-600\">\n          Generate embed code for your chat widget with custom configuration\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6 space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-medium mb-4\">Integration Type</h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {integrationTabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => {\n                        setOptions((prev) => ({ ...prev, integration: tab.id as any }));\n                        setActiveTab(tab.id);\n                      }}\n                      className={`p-3 rounded-lg border text-left transition-colors ${\n                        options.integration === tab.id\n                          ? 'border-blue-500 bg-blue-50 text-blue-700'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <Icon size={20} className=\"mb-2\" />\n                      <div className=\"text-sm font-medium\">{tab.label}</div>\n                      <div className=\"text-xs text-gray-500\">{tab.description}</div>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-medium mb-4\">Widget Position</h3>\n              <select\n                value={options.position}\n                onChange={(e) => updateOption('position', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"bottom-right\">Bottom Right</option>\n                <option value=\"bottom-left\">Bottom Left</option>\n                <option value=\"top-right\">Top Right</option>\n                <option value=\"top-left\">Top Left</option>\n                <option value=\"custom\">Custom Position</option>\n              </select>\n\n              {options.position === 'custom' && (\n                <div className=\"mt-3 grid grid-cols-2 gap-2\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Bottom (e.g., 20px)\"\n                    onChange={(e) => updateOption('customPosition.bottom', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Right (e.g., 20px)\"\n                    onChange={(e) => updateOption('customPosition.right', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Top (e.g., 20px)\"\n                    onChange={(e) => updateOption('customPosition.top', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Left (e.g., 20px)\"\n                    onChange={(e) => updateOption('customPosition.left', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-medium mb-4\">Theme & Size</h3>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Theme</label>\n                  <select\n                    value={options.theme}\n                    onChange={(e) => updateOption('theme', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"light\">Light</option>\n                    <option value=\"dark\">Dark</option>\n                    <option value=\"auto\">Auto (System)</option>\n                    <option value=\"custom\">Custom</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Size</label>\n                  <select\n                    value={options.size}\n                    onChange={(e) => updateOption('size', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"small\">Small (300x400)</option>\n                    <option value=\"medium\">Medium (400x600)</option>\n                    <option value=\"large\">Large (450x700)</option>\n                    <option value=\"custom\">Custom Size</option>\n                  </select>\n                </div>\n\n                {options.size === 'custom' && (\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Width (e.g., 400px)\"\n                      onChange={(e) => updateOption('customSize.width', e.target.value)}\n                      className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                    />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Height (e.g., 600px)\"\n                      onChange={(e) => updateOption('customSize.height', e.target.value)}\n                      className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-medium mb-4\">Features</h3>\n              <div className=\"space-y-3\">\n                {Object.entries(options.features).map(([key, value]) => (\n                  <div key={key} className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-gray-700 capitalize\">\n                      {key.replace(/([A-Z])/g, ' $1').trim()}\n                    </label>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={value || false}\n                        onChange={(e) => updateOption(`features.${key}`, e.target.checked)}\n                        className=\"sr-only peer\"\n                      />\n                      <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Code Output Panel */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between p-4 border-b\">\n              <div className=\"flex items-center space-x-2\">\n                <Code size={20} />\n                <h3 className=\"text-lg font-medium\">Generated Code</h3>\n                <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                  {options.integration.toUpperCase()}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={copyToClipboard}\n                  className=\"flex items-center space-x-2 px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n                >\n                  <Copy size={16} />\n                  <span>Copy</span>\n                </button>\n                <button\n                  onClick={downloadSnippet}\n                  className=\"flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n                >\n                  <Download size={16} />\n                  <span>Download</span>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-4\">\n              <div className=\"bg-gray-900 rounded-lg p-4 overflow-x-auto\">\n                <pre className=\"text-sm text-gray-100 whitespace-pre-wrap\">\n                  <code>{generatedCode}</code>\n                </pre>\n              </div>\n            </div>\n\n            {/* Integration Instructions */}\n            <div className=\"p-4 border-t bg-gray-50\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Integration Instructions</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                {options.integration === 'script' && (\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Copy the code above and paste it into your HTML file</li>\n                    <li>Place it before the closing &lt;/body&gt; tag for best performance</li>\n                    <li>The widget will automatically initialize when the page loads</li>\n                    <li>Customize the configuration object to match your needs</li>\n                  </ul>\n                )}\n                {options.integration === 'iframe' && (\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Add the iframe code to your HTML where you want the widget to appear</li>\n                    <li>The widget runs in complete isolation from your site</li>\n                    <li>Adjust the style attributes to customize positioning and size</li>\n                    <li>Ensure your CSP allows iframe embedding if applicable</li>\n                  </ul>\n                )}\n                {options.integration === 'npm' && (\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Install the package using npm or yarn</li>\n                    <li>Import and use the React component in your application</li>\n                    <li>Configure the widget using props or the hook API</li>\n                    <li>Supports TypeScript out of the box</li>\n                  </ul>\n                )}\n                {options.integration === 'cdn' && (\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Include the CDN script in your HTML head section</li>\n                    <li>Initialize the widget with your configuration</li>\n                    <li>No build process required - works with any website</li>\n                    <li>Automatically updated with latest features and fixes</li>\n                  </ul>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\api\\api-client.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 1,
        "column": 25,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1,
        "endColumn": 26,
        "fix": { "range": [24, 25], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 2,
        "column": 19,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 2,
        "endColumn": 20,
        "fix": { "range": [44, 45], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 3,
        "column": 19,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 3,
        "endColumn": 20,
        "fix": { "range": [64, 65], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [78, 81], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [78, 81], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 4,
        "column": 17,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 4,
        "endColumn": 18,
        "fix": { "range": [82, 83], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 5,
        "endColumn": 4,
        "fix": { "range": [86, 87], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 6,
        "endColumn": 2,
        "fix": { "range": [88, 89], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 7,
        "column": 84,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 85,
        "fix": { "range": [173, 174], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 8,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 8,
        "endColumn": 2,
        "fix": { "range": [175, 176], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 9,
        "column": 58,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 9,
        "endColumn": 59,
        "fix": { "range": [234, 235], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 10,
        "column": 44,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 10,
        "endColumn": 45,
        "fix": { "range": [279, 280], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 11,
        "column": 40,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 11,
        "endColumn": 41,
        "fix": { "range": [320, 321], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 12,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 12,
        "endColumn": 6,
        "fix": { "range": [326, 327], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 13,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 13,
        "endColumn": 2,
        "fix": { "range": [328, 329], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 14,
        "column": 60,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 14,
        "endColumn": 61,
        "fix": { "range": [389, 390], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 15,
        "column": 39,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 15,
        "endColumn": 40,
        "fix": { "range": [429, 430], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 16,
        "column": 10,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 16,
        "endColumn": 11,
        "fix": { "range": [440, 441], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 17,
        "column": 58,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 17,
        "endColumn": 59,
        "fix": { "range": [499, 500], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 18,
        "column": 55,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 18,
        "endColumn": 56,
        "fix": { "range": [555, 556], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 19,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 19,
        "endColumn": 2,
        "fix": { "range": [557, 558], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 20,
        "column": 56,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 20,
        "endColumn": 57,
        "fix": { "range": [614, 615], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 21,
        "column": 63,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 21,
        "endColumn": 64,
        "fix": { "range": [678, 679], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 22,
        "column": 14,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 22,
        "endColumn": 15,
        "fix": { "range": [693, 694], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 23,
        "column": 31,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 23,
        "endColumn": 32,
        "fix": { "range": [725, 726], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 24,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 24,
        "endColumn": 7,
        "fix": { "range": [732, 733], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 25,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 25,
        "endColumn": 5,
        "fix": { "range": [737, 738], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 26,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 26,
        "endColumn": 2,
        "fix": { "range": [739, 740], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 27,
        "column": 11,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 27,
        "endColumn": 12,
        "fix": { "range": [751, 752], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 28,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 28,
        "endColumn": 17,
        "fix": { "range": [768, 769], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 29,
        "column": 22,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 29,
        "endColumn": 23,
        "fix": { "range": [791, 792], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 30,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 30,
        "endColumn": 6,
        "fix": { "range": [797, 798], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 31,
        "column": 2,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 31,
        "endColumn": 3,
        "fix": { "range": [800, 801], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 32,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 32,
        "endColumn": 2,
        "fix": { "range": [802, 803], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 33,
        "column": 78,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 33,
        "endColumn": 79,
        "fix": { "range": [881, 882], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 34,
        "column": 36,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 34,
        "endColumn": 37,
        "fix": { "range": [918, 919], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 35,
        "column": 33,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 35,
        "endColumn": 34,
        "fix": { "range": [952, 953], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 36,
        "column": 28,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 36,
        "endColumn": 29,
        "fix": { "range": [981, 982], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 37,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 37,
        "endColumn": 14,
        "fix": { "range": [995, 996], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 38,
        "column": 41,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 38,
        "endColumn": 42,
        "fix": { "range": [1037, 1038], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 39,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 39,
        "endColumn": 7,
        "fix": { "range": [1044, 1045], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 40,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 40,
        "endColumn": 2,
        "fix": { "range": [1046, 1047], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 41,
        "column": 61,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 41,
        "endColumn": 62,
        "fix": { "range": [1108, 1109], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 42,
        "column": 59,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 42,
        "endColumn": 60,
        "fix": { "range": [1168, 1169], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 43,
        "column": 64,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 43,
        "endColumn": 65,
        "fix": { "range": [1233, 1234], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 44,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 44,
        "endColumn": 2,
        "fix": { "range": [1235, 1236], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 45,
        "column": 17,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 45,
        "endColumn": 18,
        "fix": { "range": [1253, 1254], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 46,
        "column": 28,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 46,
        "endColumn": 29,
        "fix": { "range": [1282, 1283], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 47,
        "column": 93,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 47,
        "endColumn": 94,
        "fix": { "range": [1376, 1377], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 48,
        "column": 26,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 48,
        "endColumn": 27,
        "fix": { "range": [1403, 1404], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 49,
        "column": 66,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 49,
        "endColumn": 67,
        "fix": { "range": [1470, 1471], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 50,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 50,
        "endColumn": 8,
        "fix": { "range": [1478, 1479], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 51,
        "column": 15,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 51,
        "endColumn": 16,
        "fix": { "range": [1494, 1495], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 52,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 52,
        "endColumn": 5,
        "fix": { "range": [1499, 1500], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 53,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 53,
        "endColumn": 2,
        "fix": { "range": [1501, 1502], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 54,
        "column": 23,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 54,
        "endColumn": 24,
        "fix": { "range": [1525, 1526], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 55,
        "column": 2,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 55,
        "endColumn": 3,
        "fix": { "range": [1528, 1529], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 56,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 56,
        "endColumn": 2,
        "fix": { "range": [1530, 1531], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 57,
        "column": 21,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 57,
        "endColumn": 22,
        "fix": { "range": [1552, 1553], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 58,
        "column": 25,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 58,
        "endColumn": 26,
        "fix": { "range": [1578, 1579], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 59,
        "column": 48,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 59,
        "endColumn": 49,
        "fix": { "range": [1627, 1628], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 60,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 60,
        "endColumn": 6,
        "fix": { "range": [1633, 1634], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 61,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 61,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1666, 1669], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1666, 1669], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 61,
        "column": 38,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 61,
        "endColumn": 39,
        "fix": { "range": [1672, 1673], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·method:·'POST',·...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{})·};␍` with `⏎······method:·'POST',⏎······...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{}),⏎····};`",
        "line": 62,
        "column": 32,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 62,
        "endColumn": 114,
        "fix": {
          "range": [1705, 1787],
          "text": "\n      method: 'POST',\n      ...(body !== undefined ? { body: JSON.stringify(body) } : {}),\n    };"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 63,
        "column": 35,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 63,
        "endColumn": 36,
        "fix": { "range": [1822, 1823], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 64,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 64,
        "endColumn": 6,
        "fix": { "range": [1828, 1829], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1860, 1863], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1860, 1863], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 65,
        "column": 37,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 65,
        "endColumn": 38,
        "fix": { "range": [1866, 1867], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·method:·'PUT',·...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{})·};␍` with `⏎······method:·'PUT',⏎······...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{}),⏎····};`",
        "line": 66,
        "column": 32,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 66,
        "endColumn": 113,
        "fix": {
          "range": [1899, 1980],
          "text": "\n      method: 'PUT',\n      ...(body !== undefined ? { body: JSON.stringify(body) } : {}),\n    };"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 67,
        "column": 35,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 67,
        "endColumn": 36,
        "fix": { "range": [2015, 2016], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 68,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 68,
        "endColumn": 6,
        "fix": { "range": [2021, 2022], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2055, 2058], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2055, 2058], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 69,
        "column": 39,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 69,
        "endColumn": 40,
        "fix": { "range": [2061, 2062], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·method:·'PATCH',·...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{})·};␍` with `⏎······method:·'PATCH',⏎······...(body·!==·undefined·?·{·body:·JSON.stringify(body)·}·:·{}),⏎····};`",
        "line": 70,
        "column": 32,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 70,
        "endColumn": 115,
        "fix": {
          "range": [2094, 2177],
          "text": "\n      method: 'PATCH',\n      ...(body !== undefined ? { body: JSON.stringify(body) } : {}),\n    };"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 71,
        "column": 35,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 71,
        "endColumn": 36,
        "fix": { "range": [2212, 2213], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 72,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 72,
        "endColumn": 6,
        "fix": { "range": [2218, 2219], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 73,
        "column": 28,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 73,
        "endColumn": 29,
        "fix": { "range": [2247, 2248], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 74,
        "column": 51,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 74,
        "endColumn": 52,
        "fix": { "range": [2299, 2300], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 75,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 75,
        "endColumn": 6,
        "fix": { "range": [2305, 2306], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 76,
        "endColumn": 3,
        "fix": { "range": [2309, 2309], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 76,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 76,
    "fixableWarningCount": 0,
    "source": "export type ApiError = {\r\n  message: string;\r\n  status?: number;\r\n  details?: any;\r\n};\r\n\r\nconst BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api/v1';\r\n\r\nfunction buildHeaders(extra?: HeadersInit): HeadersInit {\r\n  const headers: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  // Attach tenant and auth headers if available in browser\r\n  if (typeof window !== 'undefined') {\r\n    try {\r\n      const tenantId = localStorage.getItem('tenant-id');\r\n      if (tenantId) headers['X-Tenant-ID'] = tenantId;\r\n\r\n      const token = localStorage.getItem('auth-token');\r\n      if (token) headers['Authorization'] = `Bearer ${token}`;\r\n    } catch {\r\n      // ignore storage errors\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...headers,\r\n    ...(extra || {}),\r\n  };\r\n}\r\n\r\nasync function request<T>(path: string, init: RequestInit = {}): Promise<T> {\r\n  const url = `${BASE_URL}${path}`;\r\n  const res = await fetch(url, {\r\n    credentials: 'include',\r\n    ...init,\r\n    headers: buildHeaders(init.headers),\r\n  });\r\n\r\n  const contentType = res.headers.get('content-type') || '';\r\n  const isJson = contentType.includes('application/json');\r\n  const payload = isJson ? await res.json() : await res.text();\r\n\r\n  if (!res.ok) {\r\n    const err: ApiError = {\r\n      message: typeof payload === 'string' ? payload : payload?.message || 'Request failed',\r\n      status: res.status,\r\n      details: typeof payload === 'string' ? undefined : payload,\r\n    };\r\n    throw err;\r\n  }\r\n\r\n  return payload as T;\r\n}\r\n\r\nexport const api = {\r\n  get<T>(path: string) {\r\n    return request<T>(path, { method: 'GET' });\r\n  },\r\n  post<T>(path: string, body?: any) {\r\n    const init: RequestInit = { method: 'POST', ...(body !== undefined ? { body: JSON.stringify(body) } : {}) };\r\n    return request<T>(path, init);\r\n  },\r\n  put<T>(path: string, body?: any) {\r\n    const init: RequestInit = { method: 'PUT', ...(body !== undefined ? { body: JSON.stringify(body) } : {}) };\r\n    return request<T>(path, init);\r\n  },\r\n  patch<T>(path: string, body?: any) {\r\n    const init: RequestInit = { method: 'PATCH', ...(body !== undefined ? { body: JSON.stringify(body) } : {}) };\r\n    return request<T>(path, init);\r\n  },\r\n  delete<T>(path: string) {\r\n    return request<T>(path, { method: 'DELETE' });\r\n  },\r\n};",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\api\\types.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [75, 78], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [75, 78], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 103,
        "endColumn": 3,
        "fix": { "range": [2566, 2566], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "export type ApiError = {\n  message: string;\n  status?: number;\n  details?: any;\n};\n\nexport type Service = {\n  id: string;\n  name?: string;\n  description?: string;\n  price: number;\n  active?: boolean;\n  // Additional fields used by admin services panel\n  category?: string;\n  currency: string;\n  duration: number;\n  is_active: boolean;\n  created_at: string;\n};\n\nexport type Customer = {\n  id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n  // Support both camelCase and snake_case timestamps\n  createdAt?: string;\n  created_at: string;\n  // Additional fields used by admin customers panel\n  company?: string;\n  status?: 'active' | 'pending' | 'inactive';\n};\n\nexport type Lead = {\n  id: string;\n  source?: string;\n  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'lost';\n  customer_id?: string;\n  customer?: Customer;\n  score?: number;\n  created_at: string;\n};\n\nexport type Appointment = {\n  id: string;\n  // Support both snake_case and camelCase to match various components\n  customer_id?: string;\n  service_id?: string;\n  customerId?: string;\n  serviceId?: string;\n  title?: string;\n  // Frontend panels expect these fields\n  start_time: string;\n  end_time?: string;\n  status: 'scheduled' | 'confirmed' | 'completed' | 'cancelled' | 'no_show';\n  customer?: Customer;\n};\n\n// Marketing campaign entity used by admin campaigns panel\nexport type Campaign = {\n  id: string;\n  name: string;\n  description?: string;\n  type: 'email' | 'sms' | 'push' | 'multi_channel';\n  status: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\n  target_audience?: string;\n  start_date?: string; // ISO date string\n  created_at: string; // ISO date string\n};\n\n// Staff entity used by admin staff panel\nexport type Staff = {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'manager' | 'staff' | 'support';\n  department?: string;\n  is_active: boolean;\n  created_at: string; // ISO date string\n};\n\n// Message entity used by admin messages panel\nexport type Message = {\n  id: string;\n  recipient_id?: string;\n  channel: 'email' | 'sms' | 'whatsapp' | 'slack' | 'chat';\n  content: string;\n  status: 'sent' | 'delivered' | 'read' | 'failed';\n  created_at: string; // ISO date string\n};\n\n// Payment entity used by admin payments panel\nexport type Payment = {\n  id: string;\n  customer_id?: string;\n  customer?: Customer;\n  amount: number;\n  currency?: string;\n  payment_method?: string;\n  status: 'pending' | 'processing' | 'succeeded' | 'failed' | 'cancelled' | 'refunded';\n  transaction_id?: string;\n  created_at: string; // ISO date string\n};",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\theme-engine.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 93,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 93,
        "endColumn": 2,
        "fix": { "range": [2598, 2598], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "// Minimal ThemeEngine implementation to satisfy chat widget imports\n// Provides applyTheme and destroy methods and an AdvancedThemeConfig type\n\nexport interface AdvancedThemeConfig {\n  // Top-level theme tokens\n  primaryColor?: string;\n  secondaryColor?: string;\n  textColor?: string;\n  backgroundColor?: string;\n  borderRadius?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  buttonColor?: string;\n  buttonTextColor?: string;\n  headerColor?: string;\n  headerTextColor?: string;\n\n  // Component-specific overrides\n  components?: {\n    chatBubble?: {\n      userBubbleColor?: string;\n      botBubbleColor?: string;\n      userTextColor?: string;\n      botTextColor?: string;\n    };\n    input?: {\n      backgroundColor?: string;\n      borderColor?: string;\n      focusBorderColor?: string;\n    };\n    button?: {\n      hoverColor?: string;\n    };\n    header?: {\n      gradient?: string;\n    };\n  };\n}\n\nexport class ThemeEngine {\n  private styleElement: HTMLStyleElement | null = null;\n\n  constructor() {\n    if (typeof document !== 'undefined') {\n      this.styleElement = document.createElement('style');\n      this.styleElement.setAttribute('data-tekassist-theme', 'true');\n      document.head.appendChild(this.styleElement);\n    }\n  }\n\n  applyTheme(config: AdvancedThemeConfig): void {\n    if (!this.styleElement) return;\n\n    const lines: string[] = [];\n    lines.push(':root {');\n\n    const vars: Record<string, string | undefined> = {\n      '--primary-color': config.primaryColor,\n      '--secondary-color': config.secondaryColor,\n      '--text-color': config.textColor,\n      '--background-color': config.backgroundColor,\n      '--border-radius': config.borderRadius,\n      '--font-family': config.fontFamily,\n      '--font-size': config.fontSize,\n      '--button-color': config.buttonColor,\n      '--button-text-color': config.buttonTextColor,\n      '--header-color': config.headerColor,\n      '--header-text-color': config.headerTextColor,\n    };\n\n    for (const [key, value] of Object.entries(vars)) {\n      if (value) {\n        lines.push(`  ${key}: ${value};`);\n      }\n    }\n    lines.push('}');\n\n    // Optional component-level rules (kept minimal; only header gradient)\n    const gradient = config.components?.header?.gradient;\n    if (gradient) {\n      lines.push(`.tekassist-widget-header { background: ${gradient}; }`);\n    }\n\n    this.styleElement.textContent = lines.join('\\n');\n  }\n\n  destroy(): void {\n    if (this.styleElement && this.styleElement.parentNode) {\n      this.styleElement.parentNode.removeChild(this.styleElement);\n      this.styleElement = null;\n    }\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\utils.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 1,
        "column": 40,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1,
        "endColumn": 41,
        "fix": { "range": [39, 40], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 2,
        "column": 29,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 2,
        "endColumn": 30,
        "fix": { "range": [69, 70], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 3,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 3,
        "endColumn": 43,
        "fix": { "range": [112, 113], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 4,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 4,
        "endColumn": 2,
        "fix": { "range": [114, 115], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 5,
        "column": 51,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 5,
        "endColumn": 52,
        "fix": { "range": [166, 167], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 6,
        "column": 46,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 6,
        "endColumn": 47,
        "fix": { "range": [213, 214], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `␍`",
        "line": 7,
        "column": 35,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 36,
        "fix": { "range": [249, 250], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 8,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 8,
        "endColumn": 2,
        "fix": { "range": [252, 252], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 8,
    "fixableWarningCount": 0,
    "source": "import type { ClassValue } from 'clsx';\r\nimport { clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\n// Utility to merge Tailwind classes conditionally\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(...inputs));\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\utils\\accessibility.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 28,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 28,
        "endColumn": 2,
        "fix": { "range": [863, 863], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "export function setupSkipToContent() {\n  if (typeof document === 'undefined') return;\n\n  const skipLink = document.getElementById('skip-to-content');\n  const main = document.getElementById('main-content');\n\n  if (!skipLink || !main) return;\n\n  // Ensure the main content can receive focus for accessibility\n  if (!main.hasAttribute('tabindex')) {\n    main.setAttribute('tabindex', '-1');\n  }\n\n  // On activation, move focus to the main content region\n  const handler = (e: Event) => {\n    // Prevent default jump to allow focus management\n    e.preventDefault();\n    main.focus({ preventScroll: false });\n    main.scrollIntoView({ behavior: 'smooth', block: 'start' });\n  };\n\n  skipLink.addEventListener('click', handler);\n  skipLink.addEventListener('keydown', (e: KeyboardEvent) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      handler(e);\n    }\n  });\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\lib\\widget-messaging.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [613, 616], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [613, 616], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [764, 767], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [764, 767], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `⏎··type:·WidgetMessageTypes,⏎··data?:·T⏎` with `type:·WidgetMessageTypes,·data?:·T`",
        "line": 25,
        "column": 46,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 28,
        "endColumn": 1,
        "fix": {
          "range": [769, 809],
          "text": "type: WidgetMessageTypes, data?: T"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1097, 1100], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1097, 1100], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2077, 2080], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2077, 2080], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2304, 2307], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2304, 2307], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2520, 2523], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2520, 2523], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 98,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 98,
        "endColumn": 2,
        "fix": { "range": [2973, 2973], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "// Minimal widget messaging utility for embed and standalone communication\n// Provides a simple postMessage wrapper and event subscription API.\n\nexport enum WidgetMessageTypes {\n  UPDATE_CONFIG = 'UPDATE_CONFIG',\n  SEND_MESSAGE = 'SEND_MESSAGE',\n  OPEN_WIDGET = 'OPEN_WIDGET',\n  CLOSE_WIDGET = 'CLOSE_WIDGET',\n  RESET_CONVERSATION = 'RESET_CONVERSATION',\n  WIDGET_READY = 'WIDGET_READY',\n  WIDGET_ERROR = 'WIDGET_ERROR',\n  WIDGET_MESSAGE = 'WIDGET_MESSAGE',\n  WIDGET_RESIZE = 'WIDGET_RESIZE',\n  CONFIG_UPDATED = 'CONFIG_UPDATED',\n  CONVERSATION_RESET = 'CONVERSATION_RESET',\n}\n\nexport interface WidgetMessage<T = any> {\n  type: WidgetMessageTypes;\n  data?: T;\n  timestamp?: number;\n  source?: 'TekAssistWidget' | string;\n}\n\nexport function createWidgetMessage<T = any>(\n  type: WidgetMessageTypes,\n  data?: T\n): WidgetMessage<T> {\n  const base: Omit<WidgetMessage<T>, 'data'> = {\n    type,\n    timestamp: Date.now(),\n    source: 'TekAssistWidget',\n  };\n  if (data !== undefined) {\n    return { ...base, data } as WidgetMessage<T>;\n  }\n  return base as WidgetMessage<T>;\n}\n\ntype MessageHandler<T = any> = (message: WidgetMessage<T>) => void;\n\nexport class WidgetMessaging {\n  private handlers: Map<WidgetMessageTypes, Set<MessageHandler>> = new Map();\n  private boundHandler: ((event: MessageEvent) => void) | null = null;\n\n  init(): void {\n    if (typeof window === 'undefined') return;\n    this.boundHandler = (event: MessageEvent) => {\n      const payload = event.data as WidgetMessage | undefined;\n      if (!payload || !payload.type) return;\n      // Dispatch only known types\n      const type = payload.type as WidgetMessageTypes;\n      const listeners = this.handlers.get(type);\n      if (listeners && listeners.size > 0) {\n        listeners.forEach((cb) => {\n          try {\n            cb(payload);\n          } catch (err) {\n            // Swallow handler errors to avoid breaking the chain\n            console.error('WidgetMessaging handler error:', err);\n          }\n        });\n      }\n    };\n    window.addEventListener('message', this.boundHandler);\n  }\n\n  on<T = any>(type: WidgetMessageTypes, handler: MessageHandler<T>): void {\n    if (!this.handlers.has(type)) {\n      this.handlers.set(type, new Set());\n    }\n    this.handlers.get(type)!.add(handler as MessageHandler);\n  }\n\n  off<T = any>(type: WidgetMessageTypes, handler: MessageHandler<T>): void {\n    const listeners = this.handlers.get(type);\n    if (listeners) {\n      listeners.delete(handler as MessageHandler);\n    }\n  }\n\n  sendToParent<T = any>(message: WidgetMessage<T>): void {\n    if (typeof window === 'undefined') return;\n    try {\n      window.parent?.postMessage(message, '*');\n    } catch (err) {\n      console.error('Failed to post message to parent:', err);\n    }\n  }\n\n  destroy(): void {\n    if (typeof window !== 'undefined' && this.boundHandler) {\n      window.removeEventListener('message', this.boundHandler);\n    }\n    this.handlers.clear();\n    this.boundHandler = null;\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\providers\\query-provider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\providers\\theme-provider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\src\\providers\\toast-provider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\Inimfon Udoh\\Tekbot\\apps\\frontend\\tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
